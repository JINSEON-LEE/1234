

type Order
  @model
  @searchable
  @auth(rules: [
  { allow: groups, groups: ["admin"] },
  { allow: groups, groups: ["solver"], operations:[read]},
  { allow: owner , operations:[create, read, delete] }
  ])
  {

  id: ID!
  username: String!
  subject: String!
  option1: Boolean! # 새로운풀이
  option2: Boolean! # 상세풀이
  option3: Boolean! # 영어풀이
  deadline: AWSDateTime!
  state: State! #State, admin만 수정 가능
  pay: Int #admin만 설정 가능
  problems: [Problem] @connection(name: "OrderProblems")
  message: Message
  createdAt: AWSDateTime!
  solver:String #sub Id로 지정
}

type Review
  @model
  @searchable
  @auth(rules: [
  { allow: owner },
  # allow all authenticated users to read reviews
  { allow: private, operations: [read] },
  # allow all guest users (not authenticated) to read reviews
  { allow: public, operations: [read] }
  { allow: groups, groups: ["admin"] }
  ])
  {
  username: String! #email로 변환에서 앞부분만 잘라서 저장
  subject: String!
  rating: Float
  review: String
  order: String!
  createdAt: AWSDateTime!
}

type Problem @model @auth(rules: [
{ allow: groups, groups: ["admin"] }
{ allow: owner , operations:[create, read] }
{ allow: groups, groups: ["solver"], operations:[read]}
]){
  id: ID!
  subject: Subject!
  image: String
  description: String
  order: Order @connection(name: "OrderProblems")
  answers: [Answer] @connection(name: "ProblemAnswers")
  createdAt: AWSDateTime!
}

type Answer @model @auth(rules: [
{ allow: groups, groups: ["solver"]}
{ allow: groups, groups: ["admin"] }
{ allow: owner , ownerField : "client", operations:[read]}

]){
  id: ID!
  image: String
  description: String
  problem: Problem @connection(name: "ProblemAnswers")
  client: String
}

enum State {
  payWaiting # 결제대기
  priceWaiting #금액책정대기
  canceledWaiting # 풀이취소대기
  canceled # 풀이취소
  assignWaiting # 풀이자배정대기
  solveWaiting # 문제풀이대기
  solving # 문제풀이중
  mentoring # 멘토링중
  finished # 완료
}

enum Subject {
  classicalMechanics # 고전역학
  electromagnetism # 전자기학
  thermodynamics # 열역학
  linearAlgebra # 선형대수학
  calculus # 미적분학
  engineeringMathematics # 공업수학
  chemistry # 일반화학
  organicChemistry # 유기화학
}
enum SolverState{
  wake
  sleep
}

type Solver
  @model
  @auth(rules: [
  { allow: groups, groups: ["admin"] }
  { allow: owner , ownerField : "solver" , operations:[read]}
  ])
  @key(name: "bySolverName", fields: ["solver", "state"], queryField: "solverBySolverName")
  {
  id:ID!
  solver:String! #cognito id
  state:SolverState!
  orders: [String] #orderIDlist
}


type Message

  @model(subscriptions:{level:public})
  @auth(rules: [
  { allow: owner}
  { allow: owner , ownerField : "client"}
  { allow: owner , ownerField : "solver"}
  { allow: groups, groups: ["admin"] }
  ])
  @key(name: "byChannelID", fields: ["channelID", "createdAt"], queryField: "messagesByChannelID") {
  id: ID!
  channelID: String! #Same as order.id
  client:String!
  solver:String!
  author: String! #client는 이메일, solver는 유니바xx로
  body: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}


type Subscription {
  onCreateMessageByChannelID(channelID: String): Message
    @aws_subscribe(mutations: ["createMessage"])
}
