[{"/Users/nammyeongjin/Project/Univa-Solver/src/index.js":"1","/Users/nammyeongjin/Project/Univa-Solver/src/reportWebVitals.js":"2","/Users/nammyeongjin/Project/Univa-Solver/src/App.js":"3","/Users/nammyeongjin/Project/Univa-Solver/src/pages/Solve.js":"4","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignOut.js":"5","/Users/nammyeongjin/Project/Univa-Solver/src/pages/ChatWithAdmin.js":"6","/Users/nammyeongjin/Project/Univa-Solver/src/pages/Mentoring.js":"7","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignIn.js":"8","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignUp.js":"9","/Users/nammyeongjin/Project/Univa-Solver/src/withRoot.js":"10","/Users/nammyeongjin/Project/Univa-Solver/src/pages/Chatting.js":"11","/Users/nammyeongjin/Project/Univa-Solver/src/views/SignInSignUp.js":"12","/Users/nammyeongjin/Project/Univa-Solver/src/views/AppFooter.js":"13","/Users/nammyeongjin/Project/Univa-Solver/src/components/Typography.js":"14","/Users/nammyeongjin/Project/Univa-Solver/src/aws-exports.js":"15","/Users/nammyeongjin/Project/Univa-Solver/src/views/AppForm.js":"16","/Users/nammyeongjin/Project/Univa-Solver/src/form/FormButton.js":"17","/Users/nammyeongjin/Project/Univa-Solver/src/form/FormFeedback.js":"18","/Users/nammyeongjin/Project/Univa-Solver/src/views/AppAppBar.js":"19","/Users/nammyeongjin/Project/Univa-Solver/src/form/RFTextField.js":"20","/Users/nammyeongjin/Project/Univa-Solver/src/theme.js":"21","/Users/nammyeongjin/Project/Univa-Solver/src/components/TextField.js":"22","/Users/nammyeongjin/Project/Univa-Solver/src/components/Toolbar.js":"23","/Users/nammyeongjin/Project/Univa-Solver/src/components/AppBarList.js":"24","/Users/nammyeongjin/Project/Univa-Solver/src/components/AppBar.js":"25","/Users/nammyeongjin/Project/Univa-Solver/src/graphql/mutations.js":"26","/Users/nammyeongjin/Project/Univa-Solver/src/graphql/subscriptions.js":"27","/Users/nammyeongjin/Project/Univa-Solver/src/graphql/queries.js":"28","/Users/nammyeongjin/Project/Univa-Solver/src/components/Button.js":"29","/Users/nammyeongjin/Project/Univa-Solver/src/components/Paper.js":"30","/Users/nammyeongjin/Project/Univa-Solver/src/form/defer.js":"31"},{"size":500,"mtime":1611639937982,"results":"32","hashOfConfig":"33"},{"size":362,"mtime":1610988031460,"results":"34","hashOfConfig":"33"},{"size":1093,"mtime":1611639937979,"results":"35","hashOfConfig":"33"},{"size":24513,"mtime":1611643474046,"results":"36","hashOfConfig":"33"},{"size":1550,"mtime":1611639937985,"results":"37","hashOfConfig":"33"},{"size":2544,"mtime":1611639937983,"results":"38","hashOfConfig":"33"},{"size":12882,"mtime":1611639937983,"results":"39","hashOfConfig":"33"},{"size":1091,"mtime":1611639937984,"results":"40","hashOfConfig":"33"},{"size":1013,"mtime":1611639937985,"results":"41","hashOfConfig":"33"},{"size":505,"mtime":1610988031463,"results":"42","hashOfConfig":"33"},{"size":5410,"mtime":1611548921991,"results":"43","hashOfConfig":"33"},{"size":2121,"mtime":1610988031463,"results":"44","hashOfConfig":"33"},{"size":3081,"mtime":1610988031460,"results":"45","hashOfConfig":"33"},{"size":1635,"mtime":1610988031445,"results":"46","hashOfConfig":"33"},{"size":933,"mtime":1611642063573,"results":"47","hashOfConfig":"33"},{"size":990,"mtime":1610988031460,"results":"48","hashOfConfig":"33"},{"size":435,"mtime":1611639937980,"results":"49","hashOfConfig":"33"},{"size":1028,"mtime":1611639937980,"results":"50","hashOfConfig":"33"},{"size":5661,"mtime":1611639937986,"results":"51","hashOfConfig":"33"},{"size":837,"mtime":1611639937980,"results":"52","hashOfConfig":"33"},{"size":2288,"mtime":1610988031460,"results":"53","hashOfConfig":"33"},{"size":2703,"mtime":1610988031445,"results":"54","hashOfConfig":"33"},{"size":282,"mtime":1610988031445,"results":"55","hashOfConfig":"33"},{"size":3270,"mtime":1610988031444,"results":"56","hashOfConfig":"33"},{"size":504,"mtime":1610988031444,"results":"57","hashOfConfig":"33"},{"size":8905,"mtime":1611639937981,"results":"58","hashOfConfig":"33"},{"size":7436,"mtime":1611639937982,"results":"59","hashOfConfig":"33"},{"size":8012,"mtime":1611639937982,"results":"60","hashOfConfig":"33"},{"size":652,"mtime":1611639937979,"results":"61","hashOfConfig":"33"},{"size":1149,"mtime":1610988031445,"results":"62","hashOfConfig":"33"},{"size":301,"mtime":1611639937981,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"z8fwh6",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nammyeongjin/Project/Univa-Solver/src/index.js",[],["137","138"],"/Users/nammyeongjin/Project/Univa-Solver/src/reportWebVitals.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/App.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/pages/Solve.js",["139","140","141","142","143","144","145","146","147"],"import \"./Solve.css\";\nimport React, { useState, useEffect } from \"react\";\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\nimport { AuthState, onAuthUIStateChange } from \"@aws-amplify/ui-components\";\nimport awsconfig from \"../aws-exports\";\n\nimport Typography from \"../components/Typography\";\nimport {\n  Grid,\n  Button,\n  Box,\n  ListItem,\n  Divider,\n  Container,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nimport ex2 from \"../image/electro.png\";\nimport ArrowForwardIosOutlinedIcon from \"@material-ui/icons/ArrowForwardIosOutlined\";\nimport withRoot from \"../withRoot\";\n\nimport AppAppBar from \"../views/AppAppBar\";\nimport AppFooter from \"../views/AppFooter\";\nimport SignIn from \"./SignIn.js\";\nimport produce from \"immer\";\nimport Chatting from \"./Chatting.js\";\n\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\n\nimport { createAnswer as createAnswerMutation } from \"../graphql/mutations\";\n\nAmplify.configure(awsconfig);\n\nconst client = new AWSAppSyncClient({\n  url: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\n    jwtToken: async () =>\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\n  },\n  disableOffline: true,\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary,\n    alignItems: \"center\",\n    position: \"relative\",\n  },\n  form: {\n    marginTop: theme.spacing(6),\n  },\n  number: {\n    fontSize: 30,\n    color: theme.palette.secondary.light,\n    marginLeft: theme.spacing(2),\n  },\n  content: {\n    fontSize: 24,\n    marginLeft: theme.spacing(1),\n  },\n  inputbox: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(2),\n  },\n  popbox: {\n    fontSize: 14,\n    backgroundColor: \"#F3F3F3\",\n    padding: theme.spacing(2),\n  },\n  searchbar: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 742,\n    marginTop: theme.spacing(5),\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  inputbox: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(2),\n  },\n  plusbutton: {\n    marginBottom: theme.spacing(1.6),\n  },\n  iconButton: {\n    padding: 10,\n  },\n  method: {\n    textAlign: \"center\",\n  },\n  red: {\n    color: \"red\",\n    fontSize: 15,\n  },\n  table: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n    width: \"90%\",\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.secondary.light,\n    color: theme.palette.common.black,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst Solve = () => {\n  const classes = useStyles();\n  const initialSolutionForm = {\n    description: \"\",\n    image: \"\",\n    image_url: \"\",\n  };\n\n  const [authState, setAuthState] = useState();\n  const [user, setUser] = useState();\n  const [selectedOrderIndex, setSelectedOrderIndex] = React.useState(0);\n  const [selectedProblemIndex, setSelectedProblemIndex] = React.useState(0);\n  const [orders, setOrders] = useState([]);\n  const [problems, setProblems] = useState([]);\n  const [solutionForm, setSolutionForm] = useState([]);\n  const [viewRefSol, setViewRefSol] = useState(false);\n  const [viewSol, setViewSol] = useState(false);\n  const [answeredOrderId, setAnsweredOrderId] = useState([\n    \"e38c6f1d-1dfa-47b7-8557-3c814f158250\",\n  ]);\n\n  const handleListItemClick = (event, index) => {\n    let lastSelectedOrderIndex = selectedOrderIndex;\n    console.log(\"현재 click한 index\", index);\n    setSelectedOrderIndex(index);\n    setSelectedProblemIndex(0);\n    setViewSol(false);\n    if (index !== lastSelectedOrderIndex) {\n      setProblems([]);\n      let solutionForm1 = [];\n      for (let i = 0; i < orders[index].problems.items.length; i++) {\n        solutionForm1.push(initialSolutionForm);\n      }\n      console.log(solutionForm1);\n      setSolutionForm(solutionForm1);\n    }\n  };\n\n  const handleViewRefSol = () => {\n    setViewRefSol(!viewRefSol);\n  };\n\n  const handleViewSol = () => {\n    setViewSol(!viewSol);\n  };\n\n  React.useLayoutEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(\n        (data) => console.log(data) & setUser(data) & setAuthState(\"signedin\")\n      )\n      .catch((err) => console.log(err));\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, []);\n\n  React.useLayoutEffect(() => {\n    console.log(answeredOrderId);\n    fetchFirst();\n  }, [authState, answeredOrderId]);\n\n  React.useLayoutEffect(() => {\n    console.log(solutionForm);\n  }, [solutionForm]);\n\n  React.useLayoutEffect(() => {\n    getProblem(orders).catch((err) => console.log(err));\n  }, [selectedOrderIndex, selectedProblemIndex]);\n\n  async function nowAuth() {\n    const nowAuth = await Auth.currentUserInfo();\n    const username = nowAuth.username;\n    return username;\n  }\n\n  async function fetchFirst() {\n    const ordersFromAPI = await fetchOrders().catch((error) => {\n      console.log(error);\n    });\n    await getProblem(ordersFromAPI).catch((error) => {\n      console.log(error);\n    });\n  }\n\n  // 34895469-cf78-48fd-b353-ace169b02276 // let calculus mentor\n  /**\n   * solver name과 state:solving으로 Order를 불러오는 과정\n   * 마지막에 filter로 이미 푼 문제를 걸러 order list를 return한다.\n   */\n  async function fetchOrders() {\n    console.log(\"fetch assigned orders\");\n    const username = await nowAuth().catch((err) => console.log(err));\n    console.log(\"username\", username);\n\n    const Orderwithprob = `query MyQuery($eq: String = \"${username}\", $eq1: State = ${\"solving\"}) {\n      listOrders(filter: {solver: {eq: $eq}, state: {eq: $eq1}}) {\n        items {\n          problems {\n            items {\n              description\n              id\n              image\n              subject\n            }\n          }\n          id\n          deadline\n          username\n        }\n      }\n    }\n    `;\n    const apiData = await API.graphql({\n      query: Orderwithprob,\n      variables: { filter: { solver: { eq: username } } },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    console.log(\"apiData\", apiData);\n    // const apiData = await API.graphql(graphqlOperation(FetchAssignedOrders));\n    const ordersFromAPI = apiData.data.listOrders.items;\n    console.log(\"API로 받은 orders 전부\", ordersFromAPI);\n    for (let i = 0; i < answeredOrderId.length; i++) {\n      ordersFromAPI.filter((order) => order.id !== answeredOrderId[i]);\n    }\n    console.log(\"API로 받은 orders 중 answered 안된 것\", ordersFromAPI);\n    setOrders(ordersFromAPI);\n    return ordersFromAPI;\n  }\n\n  /**\n   * orders list를 가지고 problems를 set하는 함수\n   * 기존 orders에서 description과 image 정보를 가져온 후,\n   * s3 버켓에서 사진 url을 꺼내 image_url에 저장한다.\n   * @param {Object} orders 앞서 fetchOrders에서 받아온 orders or 전역변수 orders\n   */\n  async function getProblem(orders) {\n    if (problems[selectedProblemIndex]) return;\n    if (!solutionForm[selectedProblemIndex]) {\n      solutionForm.push(initialSolutionForm);\n    }\n    console.log(\"함수에서 받은 index\", selectedOrderIndex);\n    console.log(\n      \"문제 id: \",\n      orders[selectedOrderIndex].problems.items[selectedProblemIndex].id\n    );\n\n    let problem1 = Object.assign(\n      {},\n      orders[selectedOrderIndex].problems.items[selectedProblemIndex]\n    );\n\n    \n    if (problem1.image) {\n      const image = await Storage.get(problem1.image);\n      problem1.image_url = image;\n    }\n    setProblems(\n      produce(problems, (draft) => {\n        draft[selectedProblemIndex] = problem1;\n      })\n    );\n    console.log(problem1);\n  }\n\n  function getLastProblem() {\n    setSelectedProblemIndex(selectedProblemIndex - 1);\n  }\n\n  function getNextProblem() {\n    setSelectedProblemIndex(selectedProblemIndex + 1);\n  }\n\n  /**\n   * Answer 만들고, s3에 사진 저장, order의 state를 mentoring 상태로 만들기\n   * 추후에 mentoring만도 따로 불러와야 함\n   */\n  async function createAnswer() {\n    for (var i = 0; i < solutionForm.length; i++) {\n      if (!solutionForm[i].description || solutionForm[i].image) {\n        alert(String(i) + \"번째\" + \" 풀이를 채워주세요!\");\n        return;\n      }\n      if (solutionForm[i].image) {\n        try {\n          const data = await API.graphql({\n            query: createAnswerMutation,\n            variables: {\n              input: {\n                client: orders[selectedOrderIndex].username,\n                image: \"sol_\" + problems[i].image,\n                description: solutionForm[i].description,\n                answerProblemId:\n                  orders[selectedOrderIndex].problems.items[i].id,\n              },\n            },\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\n          });\n\n          try {\n            const res = await Storage.put(\n              \"sol_\" + problems[i].image,\n              solutionForm[i].image\n            ); //S3 버킷에 파일 저장\n            console.log(res);\n          } catch (e) {\n            console.log(\"s3 error occurred. error message : \", e);\n          }\n\n          console.log(\"create Answer successfully\", i, \"번째\");\n          console.log(data);\n        } catch (e) {\n          console.log(\"graphql error occurred. error message : \", e);\n        }\n      } else {\n        try {\n          const data = await API.graphql({\n            query: createAnswerMutation,\n            variables: {\n              input: {\n                client: orders[selectedOrderIndex].username,\n                description: solutionForm[i].description,\n                answerProblemId:\n                  orders[selectedOrderIndex].problems.items[i].id,\n              },\n            },\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\n          });\n          console.log(\"create Answer successfully\", i, \"번째\");\n          console.log(data);\n        } catch (e) {\n          console.log(\"graphql error occurred. error message : \", e);\n        }\n      }\n    }\n    answeredOrderId.push(orders[selectedOrderIndex].id);\n    // const ChangeOrderState = `mutation ChangeOrderState($id: ID = \"${orders[selectedOrderIndex].id}\") {\n    //   updateOrder(input: {id: $id, state: mentoring}) {\n    //     updatedAt\n    //     state\n    //   }\n    // }`;\n    // try {\n    //   const res = await API.graphql({\n    //     query: ChangeOrderState,\n    //     authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    //   })\n    //   console.log(res)\n    // } catch (e) {\n    //   console.log(e);\n    // }\n  }\n\n  // enum State {\n  //   payWaiting # 결제대기\n  //   priceWaiting #금액책정대기\n  //   canceledWaiting # 풀이취소대기\n  //   canceled # 풀이취소\n  //   assignWaiting # 풀이자배정대기\n  //   solving # 문제풀이중\n  //   mentoring # 멘토링중\n  //   finished # 완료\n  // }\n\n  if (!orders) return <div>There isn't problem.</div>;\n  if (problems.length === 0) return <div>IMAGE LOADING...</div>;\n  return authState === AuthState.SignedIn && user ? (\n    <div className=\"Solve\">\n      <React.Fragment>\n        <AppAppBar isLogin={authState} />\n        <div>{orders[0].subject}</div>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n        >\n          <Grid>\n            <React.Fragment>\n              <Box\n                border={0}\n                style={{ margin: \"0em 0em 0em 0em\", padding: \"0em 0em\" }}\n              >\n                <Table\n                  border=\"1px solid gray\"\n                  align=\"center\"\n                  className={classes.table}\n                  aria-label=\"simple table\"\n                >\n                  <TableHead>\n                    <TableRow>\n                      <StyledTableCell align=\"center\">번호</StyledTableCell>\n                      <StyledTableCell align=\"center\">마감시간</StyledTableCell>\n                      <StyledTableCell align=\"center\">\n                        남은 문제수\n                      </StyledTableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {orders.map((order, index) => (\n                      <TableRow key={order.deadline}>\n                        <StyledTableCell\n                          align=\"center\"\n                          component=\"th\"\n                          scope=\"row\"\n                        >\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {index + 1}\n                          </ListItem>\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {order.deadline}\n                          </ListItem>\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {order.problems.items.length}\n                          </ListItem>\n                        </StyledTableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{ margin: \"1em 1em 1em\", padding: \"1em 2em\" }}\n              >\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                (치팅시트 들어올 자리)\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <button onClick={handleViewRefSol}>\n                  {viewRefSol === true ? (\n                    <span>문제보기</span>\n                  ) : (\n                    <span>풀이보기</span>\n                  )}\n                </button>\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <Typography variant=\"body1\" align=\"center\">\n                  <br />\n                  <br />\n                  멘토 재배정 요청 : 사유\n                  <br />\n                  <br />\n                </Typography>\n              </Box>\n            </React.Fragment>\n          </Grid>\n          <Grid item xs={6}>\n            <Box\n              border={1}\n              style={{\n                minHeight: \"60\",\n                maxHeight: \"120\",\n                margin: \"1em 1em 1em\",\n                padding: \"1em 2em\",\n              }}\n            >\n              {viewSol === false ? (\n                <div>\n                  <div>\n                    문제 selectedOrderIndex: {selectedOrderIndex},\n                    selectedProblemIndex: {selectedProblemIndex}\n                  </div>\n                  {problems[selectedProblemIndex] && (\n                    <img\n                      src={problems[selectedProblemIndex].image_url}\n                      style={{ width: 400 }}\n                      alt=\"문제 사진이 없습니다.\"\n                    />\n                  )}\n                  <hr />\n                  {problems[selectedProblemIndex] && (\n                    <div>{problems[selectedProblemIndex].description}</div>\n                  )}\n                </div>\n              ) : (\n                solutionForm.map((sol, index) =>\n                  index === selectedProblemIndex ? (\n                    <div>\n                      <div>\n                        답변 selectedOrderIndex: {selectedOrderIndex},\n                        selectedProblemIndex: {selectedProblemIndex}\n                      </div>\n                      <Container\n                        className={classes.container}\n                        style={{ padding: \"10em\" }}\n                      >\n                        <Grid\n                          container\n                          spacing={10}\n                          justify=\"center\"\n                          direction=\"column\"\n                        >\n                          <Grid item xs={5}>\n                            {solutionForm[selectedProblemIndex] && (\n                              <div>\n                                {solutionForm[selectedProblemIndex].image.name}\n                              </div>\n                            )}\n                            <input\n                              id=\"contained-button-file\"\n                              className={classes.inputbox}\n                              type=\"file\"\n                              onChange={(e) =>\n                                setSolutionForm(\n                                  produce(solutionForm, (draft) => {\n                                    draft[selectedProblemIndex].image =\n                                      e.target.files[0];\n                                  })\n                                )\n                              }\n                            />\n                            <Typography\n                              variant=\"h4\"\n                              display=\"inline\"\n                              className={classes.inputword}\n                            >\n                              사진\n                            </Typography>\n                            <label htmlFor=\"contained-button-file\">\n                              <IconButton\n                                className={classes.plusbutton}\n                                variant=\"contained\"\n                                color=\"primary\"\n                                component=\"span\"\n                              >\n                                <AddCircleIcon fontSize=\"large\" />\n                              </IconButton>\n                            </label>\n                          </Grid>\n                          <Divider orientation=\"horizontal\" flexItem />\n                          <Grid item xs={5}>\n                            <div>\n                              {solutionForm[selectedProblemIndex] && (\n                                <div>\n                                  {\n                                    solutionForm[selectedProblemIndex]\n                                      .description\n                                  }\n                                </div>\n                              )}\n                              <input\n                                type=\"text\"\n                                onChange={(e) =>\n                                  setSolutionForm(\n                                    produce(solutionForm, (draft) => {\n                                      draft[selectedProblemIndex].description =\n                                        e.target.value;\n                                    })\n                                  )\n                                }\n                              />\n                            </div>\n                            <Typography\n                              variant=\"h4\"\n                              display=\"inline\"\n                              className={classes.inputword}\n                            >\n                              텍스트\n                            </Typography>\n                            <IconButton\n                              className={classes.plusbutton}\n                              variant=\"contained\"\n                              color=\"primary\"\n                              component=\"span\"\n                            >\n                              <AddCircleIcon fontSize=\"large\" />\n                            </IconButton>\n                          </Grid>\n                        </Grid>\n                      </Container>\n                    </div>\n                  ) : null\n                )\n              )}\n            </Box>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <Typography variant=\"h4\" align=\"center\">\n                  <Button\n                    disabled={\n                      !orders[selectedOrderIndex].problems.items[\n                        selectedProblemIndex - 1\n                      ]\n                    }\n                    variant=\"outlined\"\n                    color=\"black\"\n                    onClick={getLastProblem}\n                  >\n                    이전문제\n                  </Button>\n                  남은시간 02:13 ____ {selectedProblemIndex + 1}/\n                  {orders[selectedOrderIndex].problems.items.length}\n                  <Button\n                    disabled={\n                      !orders[selectedOrderIndex].problems.items[\n                        selectedProblemIndex + 1\n                      ]\n                    }\n                    variant=\"outlined\"\n                    color=\"black\"\n                    onClick={getNextProblem}\n                  >\n                    다음문제\n                  </Button>\n                  <Grid direction=\"column\" alignItems=\"center\">\n                    <Button variant=\"outlined\" onClick={handleViewSol}>\n                      {viewSol === true ? (\n                        <span>문제보기</span>\n                      ) : (\n                        <span>풀이보기</span>\n                      )}\n                    </Button>\n                    <Button variant=\"outlined\" onClick={createAnswer}>\n                      풀이 보내기\n                    </Button>\n                  </Grid>\n                </Typography>\n              </Box>\n            </React.Fragment>\n          </Grid>\n          <Grid item xs={3}>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"0em 2em\",\n                }}\n              >\n                <Chatting\n                  solver={user.username}\n                  client={orders[selectedOrderIndex].username}\n                  channelID={orders[selectedOrderIndex].id}\n                />\n                {user.username}, {orders[selectedOrderIndex].username},{\" \"}\n                {orders[selectedOrderIndex].id}\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <br />\n                <Typography variant=\"h6\" align=\"center\">\n                  풀이중 <ArrowForwardIosOutlinedIcon /> 풀이완료/멘토링{\" \"}\n                  <ArrowForwardIosOutlinedIcon /> 종료\n                </Typography>\n                <br />\n                <br />\n              </Box>\n            </React.Fragment>\n          </Grid>\n        </Grid>\n        <AppFooter />\n      </React.Fragment>\n    </div>\n  ) : (\n    <SignIn />\n  );\n};\n\nexport default withRoot(withAuthenticator(Solve));\n","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignOut.js",["148","149","150","151","152","153","154","155","156","157","158","159","160","161","162"],"import withRoot from '../withRoot';\n// --- Post bootstrap -----\nimport React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Field, Form, FormSpy } from 'react-final-form';\nimport Typography from '../components/Typography';\nimport AppFooter from '../views/AppFooter';\nimport AppAppBar from '../views/AppAppBar';\nimport AppForm from '../views/AppForm';\nimport RFTextField from '../form/RFTextField';\nimport FormButton from '../form/FormButton';\nimport FormFeedback from '../form/FormFeedback';\nimport { Auth } from 'aws-amplify';\nimport { withAuthenticator, AmplifyAuthenticator, AmplifySignOut, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';\nimport { AuthState, onAuthUIStateChange } from '@aws-amplify/ui-components';\n\nfunction signOut1() {\n\n  Auth.signOut()\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\n\n}\n\nfunction SignOut() {\n  const [authState, setAuthState] = React.useState();\n  const [user, setUser] = React.useState();\n  const history = useHistory();\n\n  React.useEffect(() => {\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, [])\n\n  return (\n    <div>\n      <AppAppBar isLogin={authState} />\n      <AmplifyAuthenticator>\n        {history.goBack() & signOut1()}\n        {authState === \"signedout\"\n          ? (history.push('/'))\n          : null\n        }\n        {/* {history.goBack()} */}\n      </AmplifyAuthenticator>\n      <AppFooter/>\n    </div>\n  );\n}\n\nexport default withRoot(SignOut);","/Users/nammyeongjin/Project/Univa-Solver/src/pages/ChatWithAdmin.js",["163","164","165","166","167"],"import withRoot from \"../withRoot\";\nimport React, { useState, useEffect } from \"react\";\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\nimport { AuthState, onAuthUIStateChange } from \"@aws-amplify/ui-components\";\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\nimport awsconfig from \"../aws-exports\";\n\nimport AppAppBar from \"../views/AppAppBar\";\nimport AppFooter from \"../views/AppFooter\";\nimport SignIn from \"./SignIn\";\nimport Chatting from \"./Chatting\";\n\nAmplify.configure(awsconfig);\n\nconst client = new AWSAppSyncClient({\n  url: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\n    jwtToken: async () =>\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\n  },\n  disableOffline: true,\n});\n\nconst ChatWithAdmin = () => {\n  const [authState, setAuthState] = useState();\n  const [user, setUser] = useState();\n  const [orderId, setOrderId] = useState(null);\n  const [viewChat, setViewChat] = useState(false);\n\n  React.useLayoutEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(\n        (data) => console.log(data) & setUser(data) & setAuthState(\"signedin\")\n      )\n      .catch((err) => console.log(err));\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, []);\n\n  React.useEffect(()=>{\n      console.log(orderId)\n  }, [orderId])\n\n  const handleChange = (event) => {\n    setOrderId(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n      console.log(event)\n      setViewChat(true)\n  }\n\n  return authState === AuthState.SignedIn && user ? (\n    <div>\n      <AppAppBar isLogin={authState} />\n      <div>관리자와의 채팅</div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"message\"\n          placeholder=\"관리자와의 채팅을 원하는 orderId를 적으세요.\"\n          value={orderId}\n          onChange={handleChange}\n        />\n        <button type=\"button\" onClick={handleSubmit}>확인</button>\n      </form>\n\n      {viewChat === false ? (\n        <div>\n            채팅이 없습니다.\n        </div>\n      ) : (\n        <Chatting\n        solver={user.username}\n        client={\"42c5798e-d5bf-4ca8-9f9b-ddf7dd6ae36f\"}\n        channelID={orderId}/>\n      )}\n\n      <AppFooter />\n    </div>\n  ) : (\n    <SignIn />\n  );\n};\n\nexport default withRoot(withAuthenticator(ChatWithAdmin));\n","/Users/nammyeongjin/Project/Univa-Solver/src/pages/Mentoring.js",["168","169","170","171","172","173","174","175","176","177","178","179"],"import withRoot from \"../withRoot\";\nimport React, { useState, useEffect } from \"react\";\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\nimport { withAuthenticator } from \"@aws-amplify/ui-react\";\nimport { AuthState, onAuthUIStateChange } from \"@aws-amplify/ui-components\";\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\nimport awsconfig from \"../aws-exports\";\n\nimport Typography from \"../components/Typography\";\nimport {\n  Grid,\n  Button,\n  Box,\n  ListItem,\n  Divider,\n  Container,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\n\nimport AppAppBar from \"../views/AppAppBar\";\nimport AppFooter from \"../views/AppFooter\";\nimport SignIn from \"./SignIn\";\nimport Chatting from \"./Chatting\";\n\nAmplify.configure(awsconfig);\n\nconst client = new AWSAppSyncClient({\n  url: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\n    jwtToken: async () =>\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\n  },\n  disableOffline: true,\n});\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary,\n    alignItems: \"center\",\n    position: \"relative\",\n  },\n  form: {\n    marginTop: theme.spacing(6),\n  },\n  number: {\n    fontSize: 30,\n    color: theme.palette.secondary.light,\n    marginLeft: theme.spacing(2),\n  },\n  content: {\n    fontSize: 24,\n    marginLeft: theme.spacing(1),\n  },\n  inputbox: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(2),\n  },\n  popbox: {\n    fontSize: 14,\n    backgroundColor: \"#F3F3F3\",\n    padding: theme.spacing(2),\n  },\n  searchbar: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: 742,\n    marginTop: theme.spacing(5),\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  inputbox: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(2),\n  },\n  plusbutton: {\n    marginBottom: theme.spacing(1.6),\n  },\n  iconButton: {\n    padding: 10,\n  },\n  method: {\n    textAlign: \"center\",\n  },\n  red: {\n    color: \"red\",\n    fontSize: 15,\n  },\n  table: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n    width: \"90%\",\n  },\n}));\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.secondary.light,\n    color: theme.palette.common.black,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst Mentoring = () => {\n  const classes = useStyles();\n\n  const [authState, setAuthState] = useState();\n  const [user, setUser] = useState();\n  const [orders, setOrders] = useState([]);\n  const [selectedOrderIndex, setSelectedOrderIndex] = useState(0);\n  const [selectedProblemIndex, setSelectedProblemIndex] = useState(0);\n  const [viewSol, setViewSol] = useState(false);\n  const [viewRefSol, setViewRefSol] = useState(false);\n\n  React.useLayoutEffect(() => {\n    Auth.currentAuthenticatedUser()\n      .then(\n        (data) => console.log(data) & setUser(data) & setAuthState(\"signedin\")\n      )\n      .catch((err) => console.log(err));\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, []);\n\n  React.useLayoutEffect(() => {\n    fetchOrders();\n  }, [authState]);\n\n  const handleListItemClick = (event, index) => {\n    let lastSelectedOrderIndex = selectedOrderIndex;\n    console.log(\"현재 click한 index\", index);\n    setSelectedOrderIndex(index);\n    setSelectedProblemIndex(0);\n    setViewSol(false);\n  };\n\n  const handleViewRefSol = () => {\n    setViewRefSol(!viewRefSol);\n  };\n\n  const handleViewSol = () => {\n    setViewSol(!viewSol);\n  };\n\n  async function nowAuth() {\n    const nowAuth = await Auth.currentUserInfo();\n    const username = nowAuth.username;\n    return username;\n  }\n\n  async function fetchOrders() {\n    console.log(\"fetch assigned orders\");\n    const username = await nowAuth().catch((err) => console.log(err));\n    console.log(\"username\", username);\n\n    const OrderWithMentoring = `query MyQuery($eq: String = \"${username}\", $eq1: State = ${\"mentoring\"}) {\n      listOrders(filter: {solver: {eq: $eq}, state: {eq: $eq1}}) {\n        items {\n          problems {\n            items {\n              description\n              id\n              image\n              subject\n            }\n          }\n          id\n          deadline\n          username\n        }\n      }\n    }\n    `;\n    const apiData = await API.graphql({\n      query: OrderWithMentoring,\n      variables: { filter: { solver: { eq: username } } },\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    });\n    console.log(\"apiData\", apiData);\n    // const apiData = await API.graphql(graphqlOperation(FetchAssignedOrders));\n    const ordersFromAPI = apiData.data.listOrders.items;\n    console.log(\"state가 mentoring인 order: \", ordersFromAPI);\n    setOrders(ordersFromAPI);\n    return ordersFromAPI;\n  }\n\n  function getLastProblem() {\n    setSelectedProblemIndex(selectedProblemIndex - 1);\n  }\n\n  function getNextProblem() {\n    setSelectedProblemIndex(selectedProblemIndex + 1);\n  }\n\n  if (!orders.length)\n    return (\n      <div>\n        <AppAppBar isLogin={authState} />\n        <div>There isn't mentoring request.</div>\n        <AppFooter />\n      </div>\n    );\n  return authState === AuthState.SignedIn && user ? (\n    <div className=\"Solve\">\n      <React.Fragment>\n        <AppAppBar isLogin={authState} />\n        <div>{orders[0].subject}</div>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"flex-start\"\n        >\n          <Grid>\n            <React.Fragment>\n              <div>멘토링 목록 </div>\n              <Box\n                border={0}\n                style={{ margin: \"0em 0em 0em 0em\", padding: \"0em 0em\" }}\n              >\n                <Table\n                  border=\"1px solid gray\"\n                  align=\"center\"\n                  className={classes.table}\n                  aria-label=\"simple table\"\n                >\n                  <TableHead>\n                    <TableRow>\n                      <StyledTableCell align=\"center\">번호</StyledTableCell>\n                      <StyledTableCell align=\"center\">마감시간</StyledTableCell>\n                      <StyledTableCell align=\"center\">문제수</StyledTableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {orders.map((order, index) => (\n                      <TableRow key={order.deadline}>\n                        <StyledTableCell\n                          align=\"center\"\n                          component=\"th\"\n                          scope=\"row\"\n                        >\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {index + 1}\n                          </ListItem>\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {order.deadline}\n                          </ListItem>\n                        </StyledTableCell>\n                        <StyledTableCell align=\"center\">\n                          <ListItem\n                            button\n                            selected={selectedOrderIndex === index}\n                            onClick={(event) =>\n                              handleListItemClick(event, index)\n                            }\n                          >\n                            {order.problems.items.length}\n                          </ListItem>\n                        </StyledTableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{ margin: \"1em 1em 1em\", padding: \"1em 2em\" }}\n              >\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                (치팅시트 들어올 자리)\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <br />\n                <button onClick={handleViewRefSol}>\n                  {viewRefSol === true ? (\n                    <span>문제보기</span>\n                  ) : (\n                    <span>풀이보기</span>\n                  )}\n                </button>\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <Typography variant=\"body1\" align=\"center\">\n                  <br />\n                  <br />\n                  멘토 재배정 요청 : 사유\n                  <br />\n                  <br />\n                </Typography>\n              </Box>\n            </React.Fragment>\n          </Grid>\n          <Grid item xs={6}>\n            <Box\n              border={1}\n              style={{\n                minHeight: \"60\",\n                maxHeight: \"120\",\n                margin: \"1em 1em 1em\",\n                padding: \"1em 2em\",\n              }}\n            >\n              <div>문제랑 답 같이 올 자리</div>\n            </Box>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <Typography variant=\"h4\" align=\"center\">\n                  <Button\n                    disabled={\n                      !orders[selectedOrderIndex].problems.items[\n                        selectedProblemIndex - 1\n                      ]\n                    }\n                    variant=\"outlined\"\n                    color=\"black\"\n                    onClick={getLastProblem}\n                  >\n                    이전문제\n                  </Button>\n                  남은시간 02:13 ____ {selectedProblemIndex + 1}/\n                  {orders[selectedOrderIndex].problems.items.length}\n                  <Button\n                    disabled={\n                      !orders[selectedOrderIndex].problems.items[\n                        selectedProblemIndex + 1\n                      ]\n                    }\n                    variant=\"outlined\"\n                    color=\"black\"\n                    onClick={getNextProblem}\n                  >\n                    다음문제\n                  </Button>\n                  <Grid direction=\"column\" alignItems=\"center\"></Grid>\n                </Typography>\n              </Box>\n            </React.Fragment>\n          </Grid>\n          <Grid item xs={3}>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"0em 2em\",\n                }}\n              >\n                <Chatting\n                  solver={user.username}\n                  client={orders[selectedOrderIndex].username}\n                  channelID={orders[selectedOrderIndex].id}\n                />\n                {user.username}, {orders[selectedOrderIndex].username},{\" \"}\n                {orders[selectedOrderIndex].id}\n              </Box>\n            </React.Fragment>\n            <React.Fragment>\n              <Box\n                border={1}\n                style={{\n                  maxHeight: \"120\",\n                  margin: \"1em 1em 1em\",\n                  padding: \"1em 2em\",\n                }}\n              >\n                <br />\n                <br />\n                <br />\n              </Box>\n            </React.Fragment>\n          </Grid>\n        </Grid>\n        <AppFooter />\n      </React.Fragment>\n    </div>\n  ) : (\n    <SignIn />\n  );\n};\nexport default withRoot(withAuthenticator(Mentoring));\n","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignIn.js",["180","181","182"],"import withRoot from '../withRoot';\n// --- Post bootstrap -----\nimport React from 'react';\nimport {AmplifyAuthenticator} from '@aws-amplify/ui-react';\nimport {onAuthUIStateChange} from '@aws-amplify/ui-components';\nimport AppAppBar from '../views/AppAppBar';\nimport AppFooter from '../views/AppFooter';\nimport {UnivaSignIn, UnivaSignUp} from '../views/SignInSignUp'\nimport { Redirect, Link } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\n \nfunction SignIn(props) {\n  const [authState, setAuthState] = React.useState();\n  const [user, setUser] = React.useState();\n  let history = useHistory();\n  React.useEffect(() => {\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, [])\n\n  return (\n    <div>\n      <AppAppBar isLogin={authState} />\n      { authState !== 'signedin' ? (\n      <AmplifyAuthenticator>\n        <UnivaSignIn/>\n        <UnivaSignUp/>\n      </AmplifyAuthenticator>) : <Redirect to=\"/\"></Redirect>\n      }\n      <AppFooter/>\n    </div>\n  );\n}\n\nexport default withRoot(SignIn);","/Users/nammyeongjin/Project/Univa-Solver/src/pages/SignUp.js",["183"],"import withRoot from '../withRoot';\n// --- Post bootstrap -----\nimport React from 'react';\nimport {AmplifyAuthenticator} from '@aws-amplify/ui-react';\nimport {onAuthUIStateChange} from '@aws-amplify/ui-components';\nimport AppAppBar from '../views/AppAppBar';\nimport AppFooter from '../views/AppFooter';\nimport {UnivaSignIn, UnivaSignUp} from '../views/SignInSignUp'\n\n\nfunction SignUp({history}) {\n  const [authState, setAuthState] = React.useState();\n  const [user, setUser] = React.useState();\n\n  React.useEffect(() => {\n    onAuthUIStateChange((nextAuthState, authData) => {\n      setAuthState(nextAuthState);\n      setUser(authData);\n    });\n  }, [])\n\n  return (\n    <div>\n      <AppAppBar isLogin={authState} />\n      <AmplifyAuthenticator initialAuthState = \"signup\">\n        <UnivaSignIn/>\n        <UnivaSignUp/>\n        { authState === \"confirmSignUp\"\n          ? history.goBack()\n          : null\n        }\n    </AmplifyAuthenticator>\n      <AppFooter/>\n    </div>\n  );\n}\n\nexport default withRoot(SignUp);","/Users/nammyeongjin/Project/Univa-Solver/src/withRoot.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/pages/Chatting.js",["184","185","186","187","188","189","190","191","192","193"],"import React, { useEffect, useState } from \"react\";\n\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\nimport \"@aws-amplify/pubsub\";\n\nimport { createMessage } from \"../graphql/mutations\";\nimport { onCreateMessageByChannelId } from \"../graphql/subscriptions\";\nimport { messagesByChannelId } from \"../graphql/queries\";\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\nimport awsconfig from \"../aws-exports\";\n\nimport \"./Chatting.css\";\nAmplify.configure(awsconfig);\n\nconst client = new AWSAppSyncClient({\n  url: awsconfig.aws_appsync_graphqlEndpoint,\n  region: awsconfig.aws_appsync_region,\n  auth: {\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\n    jwtToken: async () =>\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\n  },\n  disableOffline: true,\n});\n\nfunction Chatting(props) {\n  const [messages, setMessages] = useState([]);\n  const [messageBody, setMessageBody] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n\n  console.log(props)\n  useEffect(() => {\n    const MessagesQuery = `query MyQuery($channelID: String = \"${props.channelID}\") {\n        messagesByChannelID(channelID: $channelID, sortDirection: ASC) {\n          nextToken\n          items {\n            author\n            channelID\n            body\n            client\n            createdAt\n            id\n            owner\n            solver\n            updatedAt\n          }\n        }\n      }\n      `;\n    API.graphql({\n      query: MessagesQuery,\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\n    })\n      .then((response) => {\n        const items = response?.data?.messagesByChannelID?.items;\n        console.log(items);\n        if (items) {\n          setMessages(items);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n    // API\n    //   .graphql(graphqlOperation(messagesByChannelId, {\n    //     channelID: '39a59865-cc12-44a8-86ae-1374fc315d50',\n    //     sortDirection: 'ASC'\n    //   }))\n    //   .then((response) => {\n    //     const items = response?.data?.messagesByChannelID?.items;\n    //     console.log(items)\n    //     if (items) {\n    //       setMessages(items);\n    //     }\n    //   })\n    //   .catch((error) => { console.log(error) })\n  }, []);\n\n  // async function nowAuth() {\n  //   const nowAuth = await Auth.currentUserInfo();\n  //   const username = nowAuth.username;\n  //   return username;\n  // }\n\n  // async function step() {\n  //   const username = await nowAuth().catch((err) => console.log(err));\n  //   console.log(username);\n  //   return username;\n  // }\n\n  useEffect(() => {\n    // // const username = step();\n    // const onCreateMessageByChannelId = `subscription MySubscription {\n    //   onCreateMessageByChannelId( channelID:\"${props.channelID}\") {\n    //     body\n    //     channelID\n    //     author\n    //     client\n    //     id\n    //     solver\n    //     updatedAt\n    //     createdAt\n    //   }\n    // }\n    // `;\n\n    const onCreateMessageByChannelId = /* GraphQL */ `\n      subscription OnCreateMessageByChannelId($channelID: String = \"${props.channelID}\") {\n        onCreateMessageByChannelID(channelID: $channelID) {\n          id\n          channelID\n          client\n          solver\n          author\n          body\n          createdAt\n          updatedAt\n          owner\n        }\n      }\n    `;\n    const subscription = API.graphql({\n      query: onCreateMessageByChannelId,\n      authMode: \"API_KEY\",\n    }).subscribe({\n      next: (event) => {\n        console.log(\"evene\", event.value.data)\n        setMessages([...messages, event.value.data.onCreateMessageByChannelID]);\n        console.log(messages);\n      },\n      error: (error) => {\n        console.log(error);\n      },\n    });\n    console.log(\"Messages:\", messages);\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n\n  const handleChange = (event) => {\n    setMessageBody(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const input = {\n      author: \"js\",\n      body: `${messageBody}`,\n      channelID: `${props.channelID}`,\n      client: `${props.client}`,\n      solver: `${props.solver}`,\n    };\n\n    try {\n      setMessageBody(\"\");\n      // await API.graphql(graphqlOperation(createMessage, { input }));\n      const res = await API.graphql({\n        query: createMessage,\n        variables: { input },\n        authMode: \"AMAZON_COGNITO_USER_POOLS\",\n      });\n      console.log(res);\n    } catch (error) {\n      console.warn(error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"messages\">\n        <div className=\"messages-scroller\">\n          {messages.map((message) => {\n            if(message) return (\n            <div\n              key={message.id}\n              className={message.author === \"js\" ? \"message me\" : \"message\"}\n            >\n              {message.body}\n            </div>\n          )})}\n        </div>\n      </div>\n      <div className=\"chat-bar\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"message\"\n            placeholder=\"Type your message here...\"\n            onChange={handleChange}\n            value={messageBody}\n          />\n          <button onClick={handleSubmit}> 제출 </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Chatting;\n","/Users/nammyeongjin/Project/Univa-Solver/src/views/SignInSignUp.js",["194"],"\nimport React from 'react';\nimport { I18n } from 'aws-amplify';\nimport { AmplifySignOut, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';\n\n\nconst authScreenLabels = {\n    en: {\n        'Forgot your password?' : '암호를 잊어버렸나요?',\n        'Reset password' : '비밀번호 재설정', \n        'Sign In': '로그인',\n        'No account?' : '아직 비회원이신가요?',\n        'Create account': '회원가입',\n        'Create Account': '계정 만들기',\n        'Sign in' : \"로그인\",\n        'Have an account?' : \"이미 회원이신가요?\"\n    }\n  };\n  \n  I18n.setLanguage('en');\n  I18n.putVocabularies(authScreenLabels);\n\n  function UnivaSignIn(){\n  \n    return (<AmplifySignIn\n      slot=\"sign-in\"\n      headerText=\"로그인\"\n      formFields={[\n        { type: \"email\",  label: '이메일', placeholder: 'Email', required: true },\n        { type: \"password\", label: '비밀번호', placeholder: 'password', required: true }\n      ]}\n  \n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n      }}\n    >\n      {/* Hide create account link */}\n      {/* <div slot=\"secondary-footer-content\"></div> */}\n    </AmplifySignIn>);\n  }\n  \n  \n  function UnivaSignUp(){\n      \n    return ( <AmplifySignUp \n          \n        headerText=\"회원가입\"\n        slot=\"sign-up\"\n        formFields={[\n          { type: \"email\",  label: '이메일', placeholder: 'Email', required: true },\n          { type: \"password\", label: '비밀번호', placeholder: 'password', required: true },\n          { type: \"username\" , label: '아이디', placeholder: 'Email', required: true},\n          {\n              type: \"gender\",\n              label: \"성별\",\n              placeholder: \"(male/female)\",\n              required: true\n          },\n          {\n              type: \"birthdate\",\n              label: \"생일\",\n              placeholder: \"(yyyy/mm/dd)\",\n              required: true\n          },\n        ]}\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n        }}\n        \n       \n      /> );\n  }\n\n\n  \n  export {UnivaSignIn, UnivaSignUp};\n ","/Users/nammyeongjin/Project/Univa-Solver/src/views/AppFooter.js",["195"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {Grid, Link, Container} from '@material-ui/core';\nimport Typography from '../components/Typography.js';\nimport TextField from '../components/TextField';\n\nfunction Copyright() {\n  return (\n    <React.Fragment>\n      {'© '}\n      <Link color=\"inherit\" href=\"https://univa.co.kr/\">\n        Univa\n      </Link>{' '}\n      {new Date().getFullYear()}\n    </React.Fragment>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    backgroundColor: theme.palette.primary.dark,\n  },\n  container: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(8),\n    display: 'flex',\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 5,\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n  },\n  head: {\n    [theme.breakpoints.down('xs')]: {\n      fontSize: 5,\n    },\n  },\n  iconsWrapper: {\n    height: 120,\n  },\n  icons: {\n    display: 'flex',\n  },\n  icon: {\n    width: 48,\n    height: 48,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: theme.palette.warning.main,\n    marginRight: theme.spacing(1),\n    '&:hover': {\n      backgroundColor: theme.palette.warning.dark,\n    },\n  },\n  list: {\n    margin: 0,\n    listStyle: 'none',\n    padding: 0,\n  },\n  listItem: {\n    paddingTop: theme.spacing(0.5),\n    paddingBottom: theme.spacing(0.5),\n  },\n  language: {\n    marginTop: theme.spacing(1),\n    width: 150,\n  },\n}));\n\n\nexport default function AppFooter() {\n  const classes = useStyles();\n\n  return (\n    <Typography component=\"footer\" className={classes.root} style={{borderTop:'5px solid lightgray'}}>\n      <Container className={classes.container}>\n        <Grid container spacing={3}>\n          <Grid item xs={3} sm={4} md={3}>\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\n              LEGAL\n            </Typography>\n            <ul className={classes.list}>\n              <li className={classes.listItem}>\n                <Link color='inherit' href=\"/terms/\">이용약관</Link>\n              </li>\n            </ul>\n          </Grid>\n          <Grid item xs={3} sm={4} md={3}>\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\n              LOCATION\n            </Typography>\n            <ul className={classes.list}>\n              <li className={classes.listItem}>\n                대구광역시 테크노중앙대로333 DGIST\n              </li>\n            </ul>\n          </Grid>\n          <Grid item xs={3} sm={4} md={3}>\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\n              TEL\n            </Typography>\n            <ul className={classes.list}>\n              <li className={classes.listItem}>\n                010 - 9921 - 1263\n              </li>\n            </ul>\n          </Grid>\n          <Grid item xs={3} sm={4} md={3}>\n            <br/><Copyright/>\n          </Grid>\n        </Grid>\n      </Container>\n    </Typography>\n  );\n}","/Users/nammyeongjin/Project/Univa-Solver/src/components/Typography.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/aws-exports.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/views/AppForm.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/form/FormButton.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/form/FormFeedback.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/views/AppAppBar.js",["196","197"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport {Link, List, ListItem, ListItemText, IconButton, MenuItem, Drawer} from '@material-ui/core';\nimport AppBar from '../components/AppBar';\nimport AppBarList from '../components/AppBarList';\nimport Toolbar, { styles as toolbarStyles } from '../components/Toolbar';\nimport logo from '../image/logo.png';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { useLocation, useHistory} from 'react-router-dom'\n\n\nconst styles = (theme) => ({\n  tool: {\n    flex: 0.2,\n    fontSize: 17,\n    marginLeft: theme.spacing(7),\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n    [theme.breakpoints.up('xl')]: {\n      flex: 0.1,\n    },\n  },\n  placeholder: toolbarStyles(theme).root,\n  toolbar: {\n    justifyContent: 'space-between',\n    marginLeft: theme.spacing(0),\n    marginRight: theme.spacing(0),\n    [theme.breakpoints.down('sm')]: {\n      marginLeft: theme.spacing(0),\n      marginRight: theme.spacing(0),\n    },\n  },\n  left: {\n    flex: 1,\n  },\n  leftLinkActive: {\n    color: theme.palette.common.Black,\n  },\n  right: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n  rightLink: {\n    fontSize: 16,\n    color: theme.palette.common.Black,\n    marginLeft: theme.spacing(3),\n    [theme.breakpoints.down('sm')]: {\n      display: 'none',\n    },\n  },\n  linkSecondary: {\n    color: theme.palette.primary.main,\n  },\n  nav: {\n    marginRight: 'auto',\n    [theme.breakpoints.up('md')]: {\n      display: 'none',\n    },\n  },\n});\n\nfunction ListItemLink(props) {\n  return <ListItem button component=\"a\" {...props} />;\n}\n\n\nfunction AppAppBar(props) {\n  const location = useLocation();\n  const { classes } = props;\n  let history = useHistory();\n\n  const [state, setState] = React.useState({toggle: false});\n\n  const handleDrawerToggle = () => setState({toggle: !state.toggle});\n\n  return (\n    <div>\n      <AppBar position=\"fixed\">\n        <Toolbar className={classes.toolbar}>\n          <Link href=\"/\">\n            <img height='60' src={logo}/>\n          </Link>\n          <Link\n            variant=\"h4\"\n            underline=\"none\"\n            color=\"inherit\"\n            className={classes.tool}\n            href=\"/solve\"\n          >\n            {'문제풀이'}\n          </Link>\n          <Link\n            variant=\"h4\"\n            underline=\"none\"\n            color=\"inherit\"\n            className={classes.tool}\n            href=\"/mentoring\"\n          >\n            {'멘토링'}\n          </Link>\n          <Link\n            variant=\"h4\"\n            underline=\"none\"\n            color=\"inherit\"\n            className={classes.tool}\n            href=\"/chatwithadmin\"\n          >\n            {'관리자와의 채팅'}\n          </Link>\n          <div className={classes.right}>\n            {console.log(props.isLogin)}\n            {props.isLogin === \"signedin\"\n              ? (\n                <Link\n                color=\"inherit\"\n                variant=\"h6\"\n                underline=\"none\"\n                className={classes.rightLink}\n                href=\"/sign-out/\"\n                >\n                  {'로그아웃'}\n                </Link>\n              )\n              : (\n                <div>\n                <Link\n                  color=\"inherit\"\n                  variant=\"h6\"\n                  underline=\"none\"\n                  className={classes.rightLink}\n                  href=\"/sign-in/\"\n                  path = {location.pathname}\n                >\n                  {'로그인'}\n                </Link>\n                <Link\n                  color=\"inherit\"\n                  variant=\"h6\"\n                  underline=\"none\"\n                  className={clsx(classes.rightLink)} //색깔에 접근할 때: classes.linksecondary\n                  href=\"/sign-up/\"\n                >\n                  {'회원가입'}\n                </Link>\n                </div>\n              )\n            }\n\n\n            <IconButton onClick={handleDrawerToggle}>\n              <MenuIcon className={[classes.right, classes.nav].join(' ')}/>\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={state.toggle} anchor='right'>\n        <MenuItem onClick={handleDrawerToggle}>\n          <List>\n            <ListItemLink href=\"/solve\">\n              <ListItemText primary='문제풀이'/>\n            </ListItemLink>\n            <ListItem button onClick = {() => {history.push('/mentoring');}} >\n              <ListItemText primary='멘토링'/>\n            </ListItem>\n            <ListItem button onClick = {() => {history.push('/chatwithadmin');}} >\n              <ListItemText primary='관리자와의 채팅'/>\n            </ListItem>\n            {props.isLogin === \"signedin\"\n              ? (\n              <ListItem button onClick = {() => {history.push('/sign-out');}} >\n                <ListItemText primary='로그아웃'/>\n              </ListItem>\n              ) : (\n                <div>\n                  <ListItem button onClick = {() => {history.push('/sign-in');}} >\n                    <ListItemText primary='로그인'/>\n                  </ListItem>\n                  <ListItem button onClick = {() => {history.push('/sign-up');}} >\n                    <ListItemText primary='회원가입'/>\n                  </ListItem>\n                </div>\n              )\n            }\n          </List>\n        </MenuItem>\n      </Drawer>\n      <div className={classes.placeholder} />\n    </div>\n  );\n}\n\nAppAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AppAppBar);","/Users/nammyeongjin/Project/Univa-Solver/src/form/RFTextField.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/theme.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/TextField.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/Toolbar.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/AppBarList.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/AppBar.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/graphql/mutations.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/graphql/subscriptions.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/graphql/queries.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/Button.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/components/Paper.js",[],"/Users/nammyeongjin/Project/Univa-Solver/src/form/defer.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":2,"column":27,"nodeType":"204","messageId":"205","endLine":2,"endColumn":36},{"ruleId":"202","severity":1,"message":"206","line":3,"column":39,"nodeType":"204","messageId":"205","endLine":3,"endColumn":55},{"ruleId":"202","severity":1,"message":"207","line":26,"column":8,"nodeType":"204","messageId":"205","endLine":26,"endColumn":11},{"ruleId":"202","severity":1,"message":"208","line":42,"column":7,"nodeType":"204","messageId":"205","endLine":42,"endColumn":13},{"ruleId":"209","severity":1,"message":"210","line":91,"column":3,"nodeType":"211","messageId":"212","endLine":91,"endColumn":11},{"ruleId":"202","severity":1,"message":"213","line":142,"column":27,"nodeType":"204","messageId":"205","endLine":142,"endColumn":45},{"ruleId":"214","severity":1,"message":"215","line":186,"column":6,"nodeType":"216","endLine":186,"endColumn":34,"suggestions":"217"},{"ruleId":"214","severity":1,"message":"218","line":194,"column":6,"nodeType":"216","endLine":194,"endColumn":48,"suggestions":"219"},{"ruleId":"220","severity":1,"message":"221","line":306,"column":32,"nodeType":"222","messageId":"223","endLine":306,"endColumn":33},{"ruleId":"202","severity":1,"message":"224","line":4,"column":10,"nodeType":"204","messageId":"205","endLine":4,"endColumn":14},{"ruleId":"202","severity":1,"message":"225","line":5,"column":10,"nodeType":"204","messageId":"205","endLine":5,"endColumn":15},{"ruleId":"202","severity":1,"message":"226","line":5,"column":17,"nodeType":"204","messageId":"205","endLine":5,"endColumn":21},{"ruleId":"202","severity":1,"message":"227","line":5,"column":23,"nodeType":"204","messageId":"205","endLine":5,"endColumn":30},{"ruleId":"202","severity":1,"message":"228","line":6,"column":8,"nodeType":"204","messageId":"205","endLine":6,"endColumn":18},{"ruleId":"202","severity":1,"message":"229","line":9,"column":8,"nodeType":"204","messageId":"205","endLine":9,"endColumn":15},{"ruleId":"202","severity":1,"message":"230","line":10,"column":8,"nodeType":"204","messageId":"205","endLine":10,"endColumn":19},{"ruleId":"202","severity":1,"message":"231","line":11,"column":8,"nodeType":"204","messageId":"205","endLine":11,"endColumn":18},{"ruleId":"202","severity":1,"message":"232","line":12,"column":8,"nodeType":"204","messageId":"205","endLine":12,"endColumn":20},{"ruleId":"202","severity":1,"message":"233","line":14,"column":10,"nodeType":"204","messageId":"205","endLine":14,"endColumn":27},{"ruleId":"202","severity":1,"message":"234","line":14,"column":51,"nodeType":"204","messageId":"205","endLine":14,"endColumn":65},{"ruleId":"202","severity":1,"message":"235","line":14,"column":67,"nodeType":"204","messageId":"205","endLine":14,"endColumn":80},{"ruleId":"202","severity":1,"message":"236","line":14,"column":82,"nodeType":"204","messageId":"205","endLine":14,"endColumn":95},{"ruleId":"202","severity":1,"message":"237","line":15,"column":10,"nodeType":"204","messageId":"205","endLine":15,"endColumn":19},{"ruleId":"202","severity":1,"message":"238","line":27,"column":10,"nodeType":"204","messageId":"205","endLine":27,"endColumn":14},{"ruleId":"202","severity":1,"message":"203","line":2,"column":27,"nodeType":"204","messageId":"205","endLine":2,"endColumn":36},{"ruleId":"202","severity":1,"message":"239","line":3,"column":10,"nodeType":"204","messageId":"205","endLine":3,"endColumn":13},{"ruleId":"202","severity":1,"message":"240","line":3,"column":15,"nodeType":"204","messageId":"205","endLine":3,"endColumn":22},{"ruleId":"202","severity":1,"message":"206","line":3,"column":39,"nodeType":"204","messageId":"205","endLine":3,"endColumn":55},{"ruleId":"202","severity":1,"message":"208","line":16,"column":7,"nodeType":"204","messageId":"205","endLine":16,"endColumn":13},{"ruleId":"202","severity":1,"message":"203","line":2,"column":27,"nodeType":"204","messageId":"205","endLine":2,"endColumn":36},{"ruleId":"202","severity":1,"message":"240","line":3,"column":15,"nodeType":"204","messageId":"205","endLine":3,"endColumn":22},{"ruleId":"202","severity":1,"message":"206","line":3,"column":39,"nodeType":"204","messageId":"205","endLine":3,"endColumn":55},{"ruleId":"202","severity":1,"message":"241","line":15,"column":3,"nodeType":"204","messageId":"205","endLine":15,"endColumn":10},{"ruleId":"202","severity":1,"message":"242","line":16,"column":3,"nodeType":"204","messageId":"205","endLine":16,"endColumn":12},{"ruleId":"202","severity":1,"message":"243","line":17,"column":3,"nodeType":"204","messageId":"205","endLine":17,"endColumn":13},{"ruleId":"202","severity":1,"message":"244","line":24,"column":8,"nodeType":"204","messageId":"205","endLine":24,"endColumn":21},{"ruleId":"202","severity":1,"message":"208","line":34,"column":7,"nodeType":"204","messageId":"205","endLine":34,"endColumn":13},{"ruleId":"209","severity":1,"message":"210","line":83,"column":3,"nodeType":"211","messageId":"212","endLine":83,"endColumn":11},{"ruleId":"214","severity":1,"message":"245","line":142,"column":6,"nodeType":"216","endLine":142,"endColumn":17,"suggestions":"246"},{"ruleId":"202","severity":1,"message":"247","line":145,"column":9,"nodeType":"204","messageId":"205","endLine":145,"endColumn":31},{"ruleId":"202","severity":1,"message":"248","line":156,"column":9,"nodeType":"204","messageId":"205","endLine":156,"endColumn":22},{"ruleId":"202","severity":1,"message":"224","line":9,"column":20,"nodeType":"204","messageId":"205","endLine":9,"endColumn":24},{"ruleId":"202","severity":1,"message":"238","line":14,"column":10,"nodeType":"204","messageId":"205","endLine":14,"endColumn":14},{"ruleId":"202","severity":1,"message":"249","line":15,"column":7,"nodeType":"204","messageId":"205","endLine":15,"endColumn":14},{"ruleId":"202","severity":1,"message":"238","line":13,"column":10,"nodeType":"204","messageId":"205","endLine":13,"endColumn":14},{"ruleId":"202","severity":1,"message":"240","line":3,"column":15,"nodeType":"204","messageId":"205","endLine":3,"endColumn":22},{"ruleId":"202","severity":1,"message":"206","line":3,"column":39,"nodeType":"204","messageId":"205","endLine":3,"endColumn":55},{"ruleId":"202","severity":1,"message":"250","line":7,"column":10,"nodeType":"204","messageId":"205","endLine":7,"endColumn":36},{"ruleId":"202","severity":1,"message":"251","line":8,"column":10,"nodeType":"204","messageId":"205","endLine":8,"endColumn":29},{"ruleId":"202","severity":1,"message":"208","line":15,"column":7,"nodeType":"204","messageId":"205","endLine":15,"endColumn":13},{"ruleId":"202","severity":1,"message":"252","line":29,"column":10,"nodeType":"204","messageId":"205","endLine":29,"endColumn":18},{"ruleId":"202","severity":1,"message":"253","line":29,"column":20,"nodeType":"204","messageId":"205","endLine":29,"endColumn":31},{"ruleId":"214","severity":1,"message":"254","line":77,"column":6,"nodeType":"216","endLine":77,"endColumn":8,"suggestions":"255"},{"ruleId":"214","severity":1,"message":"254","line":139,"column":6,"nodeType":"216","endLine":139,"endColumn":16,"suggestions":"256"},{"ruleId":"257","severity":1,"message":"258","line":176,"column":35,"nodeType":"259","messageId":"260","endLine":176,"endColumn":37},{"ruleId":"202","severity":1,"message":"234","line":4,"column":10,"nodeType":"204","messageId":"205","endLine":4,"endColumn":24},{"ruleId":"202","severity":1,"message":"261","line":5,"column":8,"nodeType":"204","messageId":"205","endLine":5,"endColumn":17},{"ruleId":"202","severity":1,"message":"262","line":7,"column":8,"nodeType":"204","messageId":"205","endLine":7,"endColumn":18},{"ruleId":"263","severity":1,"message":"264","line":85,"column":13,"nodeType":"265","endLine":85,"endColumn":42},"no-native-reassign",["266"],"no-negated-in-lhs",["267"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'graphqlOperation' is defined but never used.","'ex2' is defined but never used.","'client' is assigned a value but never used.","no-dupe-keys","Duplicate key 'inputbox'.","ObjectExpression","unexpected","'setAnsweredOrderId' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useLayoutEffect has a missing dependency: 'fetchFirst'. Either include it or remove the dependency array.","ArrayExpression",["268"],"React Hook React.useLayoutEffect has missing dependencies: 'getProblem' and 'orders'. Either include them or remove the dependency array.",["269"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Link' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","'FormSpy' is defined but never used.","'Typography' is defined but never used.","'AppForm' is defined but never used.","'RFTextField' is defined but never used.","'FormButton' is defined but never used.","'FormFeedback' is defined but never used.","'withAuthenticator' is defined but never used.","'AmplifySignOut' is defined but never used.","'AmplifySignIn' is defined but never used.","'AmplifySignUp' is defined but never used.","'AuthState' is defined but never used.","'user' is assigned a value but never used.","'API' is defined but never used.","'Storage' is defined but never used.","'Divider' is defined but never used.","'Container' is defined but never used.","'IconButton' is defined but never used.","'AddCircleIcon' is defined but never used.","React Hook React.useLayoutEffect has a missing dependency: 'fetchOrders'. Either include it or remove the dependency array.",["270"],"'lastSelectedOrderIndex' is assigned a value but never used.","'handleViewSol' is assigned a value but never used.","'history' is assigned a value but never used.","'onCreateMessageByChannelId' is defined but never used.","'messagesByChannelId' is defined but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.channelID'. Either include it or remove the dependency array.",["271"],["272"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TextField' is defined but never used.","'AppBarList' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},"Update the dependencies array to be: [authState, answeredOrderId, fetchFirst]",{"range":"283","text":"284"},"Update the dependencies array to be: [getProblem, orders, selectedOrderIndex, selectedProblemIndex]",{"range":"285","text":"286"},"Update the dependencies array to be: [authState, fetchOrders]",{"range":"287","text":"288"},"Update the dependencies array to be: [props.channelID]",{"range":"289","text":"290"},"Update the dependencies array to be: [messages, props.channelID]",{"range":"291","text":"292"},[4713,4741],"[authState, answeredOrderId, fetchFirst]",[4925,4967],"[getProblem, orders, selectedOrderIndex, selectedProblemIndex]",[3424,3435],"[authState, fetchOrders]",[2231,2233],"[props.channelID]",[3819,3829],"[messages, props.channelID]"]