[{"C:\\Users\\jjss5\\Univa-Solver\\src\\index.js":"1","C:\\Users\\jjss5\\Univa-Solver\\src\\reportWebVitals.js":"2","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignIn.js":"3","C:\\Users\\jjss5\\Univa-Solver\\src\\aws-exports.js":"4","C:\\Users\\jjss5\\Univa-Solver\\src\\withRoot.js":"5","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Chatting.js":"6","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Typography.js":"7","C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\queries.js":"8","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppFooter.js":"9","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppAppBar.js":"10","C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\mutations.js":"11","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\SignInSignUp.js":"12","C:\\Users\\jjss5\\Univa-Solver\\src\\theme.js":"13","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\AppBar.js":"14","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Toolbar.js":"15","C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\subscriptions.js":"16","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\TextField.js":"17","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\AppBarList.js":"18","C:\\Users\\jjss5\\Univa-Solver\\src\\App.js":"19","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Mentoring.js":"20","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\ChatWithAdmin.js":"21","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Solve.js":"22","C:\\Users\\jjss5\\Univa-Solver\\src\\Pages\\SignUp.js":"23","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignUp.js":"24","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignOut.js":"25","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppForm.js":"26","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Paper.js":"27","C:\\Users\\jjss5\\Univa-Solver\\src\\form\\FormFeedback.js":"28","C:\\Users\\jjss5\\Univa-Solver\\src\\form\\RFTextField.js":"29","C:\\Users\\jjss5\\Univa-Solver\\src\\form\\FormButton.js":"30","C:\\Users\\jjss5\\Univa-Solver\\src\\form\\defer.js":"31","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Button.js":"32"},{"size":517,"mtime":1611556787021,"results":"33","hashOfConfig":"34"},{"size":375,"mtime":1611164964480,"results":"35","hashOfConfig":"34"},{"size":1127,"mtime":1611557552663,"results":"36","hashOfConfig":"34"},{"size":915,"mtime":1611219311022,"results":"37","hashOfConfig":"34"},{"size":522,"mtime":1611164964534,"results":"38","hashOfConfig":"34"},{"size":5613,"mtime":1611555784766,"results":"39","hashOfConfig":"34"},{"size":1702,"mtime":1611164964371,"results":"40","hashOfConfig":"34"},{"size":7161,"mtime":1611467826586,"results":"41","hashOfConfig":"34"},{"size":3197,"mtime":1611164964489,"results":"42","hashOfConfig":"34"},{"size":5860,"mtime":1611561208341,"results":"43","hashOfConfig":"34"},{"size":8287,"mtime":1611467826578,"results":"44","hashOfConfig":"34"},{"size":2199,"mtime":1611164964532,"results":"45","hashOfConfig":"34"},{"size":2397,"mtime":1611164964484,"results":"46","hashOfConfig":"34"},{"size":523,"mtime":1611164964359,"results":"47","hashOfConfig":"34"},{"size":295,"mtime":1611164964369,"results":"48","hashOfConfig":"34"},{"size":7034,"mtime":1611555784758,"results":"49","hashOfConfig":"34"},{"size":2825,"mtime":1611164964368,"results":"50","hashOfConfig":"34"},{"size":3375,"mtime":1611164964361,"results":"51","hashOfConfig":"34"},{"size":1121,"mtime":1611557636311,"results":"52","hashOfConfig":"34"},{"size":0,"mtime":1611556636559,"results":"53","hashOfConfig":"34"},{"size":0,"mtime":1611556725689,"results":"54","hashOfConfig":"34"},{"size":25320,"mtime":1611557182435,"results":"55","hashOfConfig":"34"},{"size":1050,"mtime":1611557542398,"results":"56","hashOfConfig":"34"},{"size":1050,"mtime":1611557542398,"results":"57","hashOfConfig":"34"},{"size":1602,"mtime":1611560446363,"results":"58","hashOfConfig":"34"},{"size":1031,"mtime":1611164964490,"results":"59","hashOfConfig":"34"},{"size":1196,"mtime":1611164964365,"results":"60","hashOfConfig":"34"},{"size":1070,"mtime":1611557820352,"results":"61","hashOfConfig":"34"},{"size":876,"mtime":1611557820356,"results":"62","hashOfConfig":"34"},{"size":451,"mtime":1611557820346,"results":"63","hashOfConfig":"34"},{"size":315,"mtime":1611557820362,"results":"64","hashOfConfig":"34"},{"size":675,"mtime":1611557950515,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"17slc5z",{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"68"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"68"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"68"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"68"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"68"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"68"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},"C:\\Users\\jjss5\\Univa-Solver\\src\\index.js",[],["138","139"],"C:\\Users\\jjss5\\Univa-Solver\\src\\reportWebVitals.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignIn.js",["140","141","142"],"import withRoot from '../withRoot';\r\n// --- Post bootstrap -----\r\nimport React from 'react';\r\nimport {AmplifyAuthenticator} from '@aws-amplify/ui-react';\r\nimport {onAuthUIStateChange} from '@aws-amplify/ui-components';\r\nimport AppAppBar from '../views/AppAppBar';\r\nimport AppFooter from '../views/AppFooter';\r\nimport {UnivaSignIn, UnivaSignUp} from '../views/SignInSignUp'\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport { useHistory } from \"react-router-dom\";\r\n \r\nfunction SignIn(props) {\r\n  const [authState, setAuthState] = React.useState();\r\n  const [user, setUser] = React.useState();\r\n  let history = useHistory();\r\n  React.useEffect(() => {\r\n    onAuthUIStateChange((nextAuthState, authData) => {\r\n      setAuthState(nextAuthState);\r\n      setUser(authData);\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <AppAppBar isLogin={authState} />\r\n      { authState !== 'signedin' ? (\r\n      <AmplifyAuthenticator>\r\n        <UnivaSignIn/>\r\n        <UnivaSignUp/>\r\n      </AmplifyAuthenticator>) : <Redirect to=\"/\"></Redirect>\r\n      }\r\n      <AppFooter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRoot(SignIn);","C:\\Users\\jjss5\\Univa-Solver\\src\\aws-exports.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\withRoot.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Chatting.js",["143","144","145","146","147","148","149","150","151","152"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\r\nimport \"@aws-amplify/pubsub\";\r\n\r\nimport { createMessage } from \"../graphql/mutations\";\r\nimport { onCreateMessageByChannelId } from \"../graphql/subscriptions\";\r\nimport { messagesByChannelId } from \"../graphql/queries\";\r\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\r\nimport awsconfig from \"../aws-exports\";\r\n\r\nimport \"./Chatting.css\";\r\nAmplify.configure(awsconfig);\r\n\r\nconst client = new AWSAppSyncClient({\r\n  url: awsconfig.aws_appsync_graphqlEndpoint,\r\n  region: awsconfig.aws_appsync_region,\r\n  auth: {\r\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\r\n    jwtToken: async () =>\r\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\r\n  },\r\n  disableOffline: true,\r\n});\r\n\r\nfunction Chatting(props) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [messageBody, setMessageBody] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  console.log(props)\r\n  useEffect(() => {\r\n    const MessagesQuery = `query MyQuery($channelID: String = \"${props.channelID}\") {\r\n        messagesByChannelID(channelID: $channelID, sortDirection: ASC) {\r\n          nextToken\r\n          items {\r\n            author\r\n            channelID\r\n            body\r\n            client\r\n            createdAt\r\n            id\r\n            owner\r\n            solver\r\n            updatedAt\r\n          }\r\n        }\r\n      }\r\n      `;\r\n    API.graphql({\r\n      query: MessagesQuery,\r\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n    })\r\n      .then((response) => {\r\n        const items = response?.data?.messagesByChannelID?.items;\r\n        console.log(items);\r\n        if (items) {\r\n          setMessages(items);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    // API\r\n    //   .graphql(graphqlOperation(messagesByChannelId, {\r\n    //     channelID: '39a59865-cc12-44a8-86ae-1374fc315d50',\r\n    //     sortDirection: 'ASC'\r\n    //   }))\r\n    //   .then((response) => {\r\n    //     const items = response?.data?.messagesByChannelID?.items;\r\n    //     console.log(items)\r\n    //     if (items) {\r\n    //       setMessages(items);\r\n    //     }\r\n    //   })\r\n    //   .catch((error) => { console.log(error) })\r\n  }, []);\r\n\r\n  // async function nowAuth() {\r\n  //   const nowAuth = await Auth.currentUserInfo();\r\n  //   const username = nowAuth.username;\r\n  //   return username;\r\n  // }\r\n\r\n  // async function step() {\r\n  //   const username = await nowAuth().catch((err) => console.log(err));\r\n  //   console.log(username);\r\n  //   return username;\r\n  // }\r\n\r\n  useEffect(() => {\r\n    // // const username = step();\r\n    // const onCreateMessageByChannelId = `subscription MySubscription {\r\n    //   onCreateMessageByChannelId( channelID:\"${props.channelID}\") {\r\n    //     body\r\n    //     channelID\r\n    //     author\r\n    //     client\r\n    //     id\r\n    //     solver\r\n    //     updatedAt\r\n    //     createdAt\r\n    //   }\r\n    // }\r\n    // `;\r\n\r\n    const onCreateMessageByChannelId = /* GraphQL */ `\r\n      subscription OnCreateMessageByChannelId($channelID: String = \"${props.channelID}\") {\r\n        onCreateMessageByChannelID(channelID: $channelID) {\r\n          id\r\n          channelID\r\n          client\r\n          solver\r\n          author\r\n          body\r\n          createdAt\r\n          updatedAt\r\n          owner\r\n        }\r\n      }\r\n    `;\r\n    const subscription = API.graphql({\r\n      query: onCreateMessageByChannelId,\r\n      authMode: \"API_KEY\",\r\n    }).subscribe({\r\n      next: (event) => {\r\n        console.log(\"evene\", event.value.data)\r\n        setMessages([...messages, event.value.data.onCreateMessageByChannelID]);\r\n        console.log(messages);\r\n      },\r\n      error: (error) => {\r\n        console.log(error);\r\n      },\r\n    });\r\n    console.log(\"Messages:\", messages);\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [messages]);\r\n\r\n  const handleChange = (event) => {\r\n    setMessageBody(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    const input = {\r\n      author: \"js\",\r\n      body: `${messageBody}`,\r\n      channelID: `${props.channelID}`,\r\n      client: `${props.client}`,\r\n      solver: `${props.solver}`,\r\n    };\r\n\r\n    try {\r\n      setMessageBody(\"\");\r\n      // await API.graphql(graphqlOperation(createMessage, { input }));\r\n      const res = await API.graphql({\r\n        query: createMessage,\r\n        variables: { input },\r\n        authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n      });\r\n      console.log(res);\r\n    } catch (error) {\r\n      console.warn(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"messages\">\r\n        <div className=\"messages-scroller\">\r\n          {messages.map((message) => {\r\n            if(message) return (\r\n            <div\r\n              key={message.id}\r\n              className={message.author === \"js\" ? \"message me\" : \"message\"}\r\n            >\r\n              {message.body}\r\n            </div>\r\n          )})}\r\n        </div>\r\n      </div>\r\n      <div className=\"chat-bar\">\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"message\"\r\n            placeholder=\"Type your message here...\"\r\n            onChange={handleChange}\r\n            value={messageBody}\r\n          />\r\n          <button onClick={handleSubmit}> 제출 </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatting;\r\n","C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Typography.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\queries.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppFooter.js",["153"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Grid, Link, Container} from '@material-ui/core';\r\nimport Typography from '../components/Typography.js';\r\nimport TextField from '../components/TextField';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <React.Fragment>\r\n      {'© '}\r\n      <Link color=\"inherit\" href=\"https://univa.co.kr/\">\r\n        Univa\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(8),\r\n    display: 'flex',\r\n    [theme.breakpoints.down('xs')]: {\r\n      fontSize: 5,\r\n      marginTop: theme.spacing(2),\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n  },\r\n  head: {\r\n    [theme.breakpoints.down('xs')]: {\r\n      fontSize: 5,\r\n    },\r\n  },\r\n  iconsWrapper: {\r\n    height: 120,\r\n  },\r\n  icons: {\r\n    display: 'flex',\r\n  },\r\n  icon: {\r\n    width: 48,\r\n    height: 48,\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: theme.palette.warning.main,\r\n    marginRight: theme.spacing(1),\r\n    '&:hover': {\r\n      backgroundColor: theme.palette.warning.dark,\r\n    },\r\n  },\r\n  list: {\r\n    margin: 0,\r\n    listStyle: 'none',\r\n    padding: 0,\r\n  },\r\n  listItem: {\r\n    paddingTop: theme.spacing(0.5),\r\n    paddingBottom: theme.spacing(0.5),\r\n  },\r\n  language: {\r\n    marginTop: theme.spacing(1),\r\n    width: 150,\r\n  },\r\n}));\r\n\r\n\r\nexport default function AppFooter() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Typography component=\"footer\" className={classes.root} style={{borderTop:'5px solid lightgray'}}>\r\n      <Container className={classes.container}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={3} sm={4} md={3}>\r\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\r\n              LEGAL\r\n            </Typography>\r\n            <ul className={classes.list}>\r\n              <li className={classes.listItem}>\r\n                <Link color='inherit' href=\"/terms/\">이용약관</Link>\r\n              </li>\r\n            </ul>\r\n          </Grid>\r\n          <Grid item xs={3} sm={4} md={3}>\r\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\r\n              LOCATION\r\n            </Typography>\r\n            <ul className={classes.list}>\r\n              <li className={classes.listItem}>\r\n                대구광역시 테크노중앙대로333 DGIST\r\n              </li>\r\n            </ul>\r\n          </Grid>\r\n          <Grid item xs={3} sm={4} md={3}>\r\n            <Typography className={classes.head} variant=\"h6\" marked=\"left\" gutterBottom>\r\n              TEL\r\n            </Typography>\r\n            <ul className={classes.list}>\r\n              <li className={classes.listItem}>\r\n                010 - 9921 - 1263\r\n              </li>\r\n            </ul>\r\n          </Grid>\r\n          <Grid item xs={3} sm={4} md={3}>\r\n            <br/><Copyright/>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </Typography>\r\n  );\r\n}","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppAppBar.js",["154","155"],"C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\mutations.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\views\\SignInSignUp.js",["156"],"\r\nimport React from 'react';\r\nimport { I18n } from 'aws-amplify';\r\nimport { AmplifySignOut, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';\r\n\r\n\r\nconst authScreenLabels = {\r\n    en: {\r\n        'Forgot your password?' : '암호를 잊어버렸나요?',\r\n        'Reset password' : '비밀번호 재설정', \r\n        'Sign In': '로그인',\r\n        'No account?' : '아직 비회원이신가요?',\r\n        'Create account': '회원가입',\r\n        'Create Account': '계정 만들기',\r\n        'Sign in' : \"로그인\",\r\n        'Have an account?' : \"이미 회원이신가요?\"\r\n    }\r\n  };\r\n  \r\n  I18n.setLanguage('en');\r\n  I18n.putVocabularies(authScreenLabels);\r\n\r\n  function UnivaSignIn(){\r\n  \r\n    return (<AmplifySignIn\r\n      slot=\"sign-in\"\r\n      headerText=\"로그인\"\r\n      formFields={[\r\n        { type: \"email\",  label: '이메일', placeholder: 'Email', required: true },\r\n        { type: \"password\", label: '비밀번호', placeholder: 'password', required: true }\r\n      ]}\r\n  \r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      {/* Hide create account link */}\r\n      {/* <div slot=\"secondary-footer-content\"></div> */}\r\n    </AmplifySignIn>);\r\n  }\r\n  \r\n  \r\n  function UnivaSignUp(){\r\n      \r\n    return ( <AmplifySignUp \r\n          \r\n        headerText=\"회원가입\"\r\n        slot=\"sign-up\"\r\n        formFields={[\r\n          { type: \"email\",  label: '이메일', placeholder: 'Email', required: true },\r\n          { type: \"password\", label: '비밀번호', placeholder: 'password', required: true },\r\n          { type: \"username\" , label: '아이디', placeholder: 'Email', required: true},\r\n          {\r\n              type: \"gender\",\r\n              label: \"성별\",\r\n              placeholder: \"(male/female)\",\r\n              required: true\r\n          },\r\n          {\r\n              type: \"birthdate\",\r\n              label: \"생일\",\r\n              placeholder: \"(yyyy/mm/dd)\",\r\n              required: true\r\n          },\r\n        ]}\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n        }}\r\n        \r\n       \r\n      /> );\r\n  }\r\n\r\n\r\n  \r\n  export {UnivaSignIn, UnivaSignUp};\r\n ","C:\\Users\\jjss5\\Univa-Solver\\src\\theme.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\AppBar.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Toolbar.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\graphql\\subscriptions.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\TextField.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\AppBarList.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\App.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Mentoring.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\ChatWithAdmin.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\Solve.js",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185"],"import \"./Solve.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { API, Storage, Amplify, Auth, graphqlOperation } from \"aws-amplify\";\r\nimport {\r\n  AmplifyAuthenticator,\r\n  AmplifySignOut,\r\n  AmplifySignIn,\r\n  AmplifySignUp,\r\n  withAuthenticator,\r\n} from \"@aws-amplify/ui-react\";\r\nimport { AuthState, onAuthUIStateChange } from \"@aws-amplify/ui-components\";\r\nimport awsconfig from \"../aws-exports\";\r\nimport { listProblems, searchOrders, listOrders } from \"../graphql/queries\";\r\n\r\nimport Typography from \"../components/Typography\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Box,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Container,\r\n  Paper,\r\n  IconButton,\r\n  InputBase,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport HelpIcon from \"@material-ui/icons/Help\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\n\r\nimport ex2 from \"../image/electro.png\";\r\nimport ArrowBackIosOutlinedIcon from \"@material-ui/icons/ArrowBackIosOutlined\";\r\nimport ArrowForwardIosOutlinedIcon from \"@material-ui/icons/ArrowForwardIosOutlined\";\r\nimport withRoot from \"../withRoot\";\r\n\r\nimport AppAppBar from \"../views/AppAppBar\";\r\nimport AppFooter from \"../views/AppFooter\";\r\nimport SignIn from \"./SignIn.js\";\r\nimport produce from \"immer\";\r\nimport moment from \"moment\";\r\nimport Chatting from \"./Chatting.js\";\r\n\r\nimport AWSAppSyncClient, { AUTH_TYPE } from \"aws-appsync\";\r\n\r\nimport { createAnswer as createAnswerMutation } from \"../graphql/mutations\";\r\nimport { solverBySolverName, } from \"../graphql/queries\";\r\nAmplify.configure(awsconfig);\r\nconst client = new AWSAppSyncClient({\r\n  url: awsconfig.aws_appsync_graphqlEndpoint,\r\n  region: awsconfig.aws_appsync_region,\r\n  auth: {\r\n    type: AUTH_TYPE.AMAZON_COGNITO_USER_POOLS,\r\n    jwtToken: async () =>\r\n      (await Auth.currentSession()).getIdToken().getJwtToken(),\r\n  },\r\n  disableOffline: true,\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.primary,\r\n    alignItems: \"center\",\r\n    position: \"relative\",\r\n  },\r\n  form: {\r\n    marginTop: theme.spacing(6),\r\n  },\r\n  number: {\r\n    fontSize: 30,\r\n    color: theme.palette.secondary.light,\r\n    marginLeft: theme.spacing(2),\r\n  },\r\n  content: {\r\n    fontSize: 24,\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  inputbox: {\r\n    marginTop: theme.spacing(5),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  popbox: {\r\n    fontSize: 14,\r\n    backgroundColor: \"#F3F3F3\",\r\n    padding: theme.spacing(2),\r\n  },\r\n  searchbar: {\r\n    padding: \"2px 4px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    width: 742,\r\n    marginTop: theme.spacing(5),\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  inputbox: {\r\n    marginTop: theme.spacing(5),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  plusbutton: {\r\n    marginBottom: theme.spacing(1.6),\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  method: {\r\n    textAlign: \"center\",\r\n  },\r\n  red: {\r\n    color: \"red\",\r\n    fontSize: 15,\r\n  },\r\n  table: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(2),\r\n    width: \"90%\",\r\n  },\r\n}));\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.secondary.light,\r\n    color: theme.palette.common.black,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst Solve = () => {\r\n  const classes = useStyles();\r\n  const initialSolutionForm = {\r\n    description: \"\",\r\n    image: \"\",\r\n    image_url: \"\",\r\n  };\r\n\r\n  const [authState, setAuthState] = useState();\r\n  const [user, setUser] = useState();\r\n  const [selectedOrderIndex, setSelectedOrderIndex] = React.useState(0);\r\n  const [selectedProblemIndex, setSelectedProblemIndex] = React.useState(0);\r\n  const [orders, setOrders] = useState([]);\r\n  const [problems, setProblems] = useState([]);\r\n  const [solutionForm, setSolutionForm] = useState([]);\r\n  const [viewRefSol, setViewRefSol] = useState(false);\r\n  const [viewSol, setViewSol] = useState(false);\r\n  const [answeredOrderId, setAnsweredOrderId] = useState([\"e38c6f1d-1dfa-47b7-8557-3c814f158250\"])\r\n\r\n  const handleListItemClick = (event, index) => {\r\n    let lastSelectedOrderIndex = selectedOrderIndex;\r\n    console.log(\"현재 click한 index\", index);\r\n    setSelectedOrderIndex(index);\r\n    setSelectedProblemIndex(0);\r\n    setViewSol(false);\r\n    if (index !== lastSelectedOrderIndex) {\r\n      setProblems([]);\r\n      let solutionForm1 = []\r\n      for (let i = 0; i < orders[index].problems.items.length; i++) {\r\n        solutionForm1.push(initialSolutionForm)\r\n      }\r\n      console.log(solutionForm1);\r\n      setSolutionForm(solutionForm1);\r\n    }\r\n  };\r\n\r\n  const handleViewRefSol = () => {\r\n    setViewRefSol(!viewRefSol);\r\n  };\r\n\r\n  const handleViewSol = () => {\r\n    setViewSol(!viewSol);\r\n  };\r\n\r\n  React.useLayoutEffect(() => {\r\n    Auth.currentAuthenticatedUser()\r\n      .then(\r\n        (data) => console.log(data) & setUser(data) & setAuthState(\"signedin\")\r\n      )\r\n      .catch((err) => console.log(err));\r\n    onAuthUIStateChange((nextAuthState, authData) => {\r\n      setAuthState(nextAuthState);\r\n      setUser(authData);\r\n    });\r\n  }, []);\r\n\r\n  React.useLayoutEffect(() => {\r\n    console.log(answeredOrderId)\r\n    fetchFirst();\r\n  }, [authState, answeredOrderId]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    console.log(solutionForm);\r\n  }, [solutionForm]);\r\n\r\n  React.useLayoutEffect(() => {\r\n    getProblem(orders).catch((err) => console.log(err));\r\n  }, [selectedOrderIndex, selectedProblemIndex]);\r\n\r\n  async function nowAuth() {\r\n    const nowAuth = await Auth.currentUserInfo();\r\n    const username = nowAuth.username;\r\n    return username;\r\n  }\r\n\r\n  async function fetchFirst() {\r\n    const ordersFromAPI = await fetchOrders().catch((error) => {\r\n      console.log(error);\r\n    });\r\n    await getProblem(ordersFromAPI).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  // 34895469-cf78-48fd-b353-ace169b02276 // let calculus mentor\r\n  /**\r\n   * solver name과 state:solving으로 Order를 불러오는 과정\r\n   * 마지막에 filter로 이미 푼 문제를 걸러 order list를 return한다. \r\n   */\r\n  async function fetchOrders() {\r\n    console.log(\"fetch assigned orders\");\r\n    const username = await nowAuth().catch((err) => console.log(err));\r\n    console.log('username', username)\r\n\r\n    const Orderwithprob = `query MyQuery($eq: String = \"${username}\", $eq1: State = ${\"solving\"}) {\r\n      listOrders(filter: {solver: {eq: $eq}, state: {eq: $eq1}}) {\r\n        items {\r\n          problems {\r\n            items {\r\n              description\r\n              id\r\n              image\r\n              subject\r\n            }\r\n          }\r\n          id\r\n          deadline\r\n          username\r\n        }\r\n      }\r\n    }\r\n    `;\r\n    const apiData = await API.graphql({\r\n      query: Orderwithprob,\r\n      variables : {filter: {solver: {eq: username} }},\r\n      authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n    })\r\n    console.log(\"apiData\", apiData)\r\n    // const apiData = await API.graphql(graphqlOperation(FetchAssignedOrders));\r\n    const ordersFromAPI = apiData.data.listOrders.items;\r\n    console.log(\"API로 받은 orders 전부\", ordersFromAPI);\r\n    for(let i=0;i<answeredOrderId.length;i++) {\r\n      ordersFromAPI.filter(order => order.id !== answeredOrderId[i]);\r\n    }\r\n    console.log(\"API로 받은 orders 중 answered 안된 것\", ordersFromAPI);\r\n    setOrders(ordersFromAPI);\r\n    return ordersFromAPI;\r\n  }\r\n\r\n  /**\r\n   * orders list를 가지고 problems를 set하는 함수\r\n   * 기존 orders에서 description과 image 정보를 가져온 후, \r\n   * s3 버켓에서 사진 url을 꺼내 image_url에 저장한다.\r\n   * @param {Object} orders 앞서 fetchOrders에서 받아온 orders or 전역변수 orders\r\n   */\r\n  async function getProblem(orders) {\r\n    if (problems[selectedProblemIndex]) return;\r\n    if (!solutionForm[selectedProblemIndex]) {\r\n      solutionForm.push(initialSolutionForm);\r\n    }\r\n    console.log(\"함수에서 받은 index\", selectedOrderIndex);\r\n    console.log(\r\n      \"문제 id: \", orders[selectedOrderIndex].problems.items[selectedProblemIndex].id\r\n    );\r\n    \r\n    let problem1 = Object.assign({}, orders[selectedOrderIndex].problems.items[selectedProblemIndex])\r\n    if (problem1.image) {\r\n      const image = await Storage.get(problem1.image);\r\n      problem1.image_url = image;\r\n    }\r\n    setProblems(\r\n      produce(problems, (draft) => {\r\n        draft[selectedProblemIndex] = problem1;\r\n      })\r\n    );\r\n    console.log(problem1);\r\n  }\r\n\r\n  function getLastProblem() {\r\n    setSelectedProblemIndex(selectedProblemIndex - 1);\r\n  }\r\n\r\n  function getNextProblem() {\r\n    setSelectedProblemIndex(selectedProblemIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Answer 만들고, s3에 사진 저장, order의 state를 mentoring 상태로 만들기\r\n   * 추후에 mentoring만도 따로 불러와야 함\r\n   */\r\n  async function createAnswer() {\r\n    for (var i = 0; i < solutionForm.length; i++) {\r\n      if(!solutionForm[i].description || solutionForm[i].image) {\r\n        alert(String(i)+\"번째\"+\" 풀이를 채워주세요!\")\r\n        return\r\n      }\r\n      if (solutionForm[i].image) {\r\n        try {\r\n          const data = await API.graphql({\r\n            query: createAnswerMutation,\r\n            variables: {\r\n              input: {\r\n                client: orders[selectedOrderIndex].username,\r\n                image: \"sol_\" + problems[i].image,\r\n                description: solutionForm[i].description,\r\n                answerProblemId: orders[selectedOrderIndex].problems.items[i].id,\r\n              },\r\n            },\r\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n          });\r\n  \r\n          try {\r\n            const res = await Storage.put(\r\n              \"sol_\" + problems[i].image,\r\n              solutionForm[i].image\r\n            ); //S3 버킷에 파일 저장\r\n            console.log(res);\r\n          } catch (e) {\r\n            console.log(\"s3 error occurred. error message : \", e);\r\n          }\r\n  \r\n          console.log(\"create Answer successfully\", i, \"번째\");\r\n          console.log(data);\r\n        } catch (e) {\r\n          console.log(\"graphql error occurred. error message : \", e);\r\n        }\r\n      } else {\r\n        try {\r\n          const data = await API.graphql({\r\n            query: createAnswerMutation,\r\n            variables: {\r\n              input: {\r\n                client: orders[selectedOrderIndex].username,\r\n                description: solutionForm[i].description,\r\n                answerProblemId: orders[selectedOrderIndex].problems.items[i].id,\r\n              },\r\n            },\r\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n          });\r\n          console.log(\"create Answer successfully\", i, \"번째\");\r\n          console.log(data);\r\n        } catch(e) {\r\n          console.log(\"graphql error occurred. error message : \", e);\r\n        }\r\n      }\r\n    }\r\n    answeredOrderId.push(orders[selectedOrderIndex].id)\r\n    // const ChangeOrderState = `mutation ChangeOrderState($id: ID = \"${orders[selectedOrderIndex].id}\") {\r\n    //   updateOrder(input: {id: $id, state: mentoring}) {\r\n    //     updatedAt\r\n    //     state\r\n    //   }\r\n    // }`;\r\n    // try {\r\n    //   const res = await API.graphql({\r\n    //     query: ChangeOrderState,\r\n    //     authMode: \"AMAZON_COGNITO_USER_POOLS\",\r\n    //   })\r\n    //   console.log(res)\r\n    // } catch (e) {\r\n    //   console.log(e);\r\n    // }\r\n  }\r\n\r\n  // enum State {\r\n  //   payWaiting # 결제대기\r\n  //   priceWaiting #금액책정대기\r\n  //   canceledWaiting # 풀이취소대기\r\n  //   canceled # 풀이취소\r\n  //   assignWaiting # 풀이자배정대기\r\n  //   solving # 문제풀이중\r\n  //   mentoring # 멘토링중\r\n  //   finished # 완료\r\n  // }\r\n\r\n  if (!orders) return <div>There isn't problem.</div>;\r\n  if (problems.length === 0) return <div>IMAGE LOADING...</div>;\r\n  return authState === AuthState.SignedIn && user ? (\r\n    <div className=\"Solve\">\r\n      <React.Fragment>\r\n        <AppAppBar isLogin={authState} />\r\n        <div>{orders[0].subject}</div>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"center\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <Grid>\r\n            <React.Fragment>\r\n              <Box\r\n                border={0}\r\n                style={{ margin: \"0em 0em 0em 0em\", padding: \"0em 0em\" }}\r\n              >\r\n                <Table\r\n                  border=\"1px solid gray\"\r\n                  align=\"center\"\r\n                  className={classes.table}\r\n                  aria-label=\"simple table\"\r\n                >\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      <StyledTableCell align=\"center\">번호</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">마감시간</StyledTableCell>\r\n                      <StyledTableCell align=\"center\">\r\n                        남은 문제수\r\n                      </StyledTableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {orders.map((order, index) => (\r\n                      <TableRow key={order.deadline}>\r\n                        <StyledTableCell\r\n                          align=\"center\"\r\n                          component=\"th\"\r\n                          scope=\"row\"\r\n                        >\r\n                          <ListItem\r\n                            button\r\n                            selected={selectedOrderIndex === index}\r\n                            onClick={(event) =>\r\n                              handleListItemClick(event, index)\r\n                            }\r\n                          >\r\n                            {index + 1}\r\n                          </ListItem>\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          <ListItem\r\n                            button\r\n                            selected={selectedOrderIndex === index}\r\n                            onClick={(event) =>\r\n                              handleListItemClick(event, index)\r\n                            }\r\n                          >\r\n                            {order.deadline}\r\n                          </ListItem>\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"center\">\r\n                          <ListItem\r\n                            button\r\n                            selected={selectedOrderIndex === index}\r\n                            onClick={(event) =>\r\n                              handleListItemClick(event, index)\r\n                            }\r\n                          >\r\n                            {order.problems.items.length}\r\n                          </ListItem>\r\n                        </StyledTableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              </Box>\r\n            </React.Fragment>\r\n            <React.Fragment>\r\n              <Box\r\n                border={1}\r\n                style={{ margin: \"1em 1em 1em\", padding: \"1em 2em\" }}\r\n              >\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                (치팅시트 들어올 자리)\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <br />\r\n                <button onClick={handleViewRefSol}>\r\n                  {viewRefSol === true ? (\r\n                    <span>문제보기</span>\r\n                  ) : (\r\n                    <span>풀이보기</span>\r\n                  )}\r\n                </button>\r\n              </Box>\r\n            </React.Fragment>\r\n            <React.Fragment>\r\n              <Box\r\n                border={1}\r\n                style={{\r\n                  maxHeight: \"120\",\r\n                  margin: \"1em 1em 1em\",\r\n                  padding: \"1em 2em\",\r\n                }}\r\n              >\r\n                <Typography variant=\"body1\" align=\"center\">\r\n                  <br />\r\n                  <br />\r\n                  멘토 재배정 요청 : 사유\r\n                  <br />\r\n                  <br />\r\n                </Typography>\r\n              </Box>\r\n            </React.Fragment>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Box\r\n              border={1}\r\n              style={{\r\n                minHeight: \"60\",\r\n                maxHeight: \"120\",\r\n                margin: \"1em 1em 1em\",\r\n                padding: \"1em 2em\",\r\n              }}\r\n            >\r\n              {viewSol === false ? (\r\n                <div>\r\n                  <div>\r\n                    문제 selectedOrderIndex: {selectedOrderIndex},\r\n                    selectedProblemIndex: {selectedProblemIndex}\r\n                  </div>\r\n                  {problems[selectedProblemIndex] && (\r\n                    <img\r\n                      src={problems[selectedProblemIndex].image_url}\r\n                      style={{ width: 400 }}\r\n                      alt=\"문제 사진이 없습니다.\"\r\n                    />\r\n                  )}\r\n                  <hr />\r\n                  {problems[selectedProblemIndex] && (\r\n                    <div>{problems[selectedProblemIndex].description}</div>\r\n                  )}\r\n                </div>\r\n              ) : (\r\n                solutionForm.map((sol, index) =>\r\n                  index === selectedProblemIndex ? (\r\n                    <div>\r\n                      <div>\r\n                        답변 selectedOrderIndex: {selectedOrderIndex},\r\n                        selectedProblemIndex: {selectedProblemIndex}\r\n                      </div>\r\n                      <Container\r\n                        className={classes.container}\r\n                        style={{ padding: \"10em\" }}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          spacing={10}\r\n                          justify=\"center\"\r\n                          direction=\"column\"\r\n                        >\r\n                          <Grid item xs={5}>\r\n                            {solutionForm[selectedProblemIndex] && (\r\n                              <div>{solutionForm[selectedProblemIndex].image.name}</div>\r\n                            )}\r\n                            <input\r\n                              id=\"contained-button-file\"\r\n                              className={classes.inputbox}\r\n                              type=\"file\"\r\n                              onChange={(e) =>\r\n                                setSolutionForm(\r\n                                  produce(solutionForm, (draft) => {\r\n                                    draft[selectedProblemIndex].image =\r\n                                      e.target.files[0];\r\n                                  })\r\n                                )\r\n                              }\r\n                            />\r\n                            <Typography\r\n                              variant=\"h4\"\r\n                              display=\"inline\"\r\n                              className={classes.inputword}\r\n                            >\r\n                              사진\r\n                            </Typography>\r\n                            <label htmlFor=\"contained-button-file\">\r\n                              <IconButton\r\n                                className={classes.plusbutton}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                component=\"span\"\r\n                              >\r\n                                <AddCircleIcon fontSize=\"large\" />\r\n                              </IconButton>\r\n                            </label>\r\n                          </Grid>\r\n                          <Divider orientation=\"horizontal\" flexItem />\r\n                          <Grid item xs={5}>\r\n                            <div>\r\n                              {solutionForm[selectedProblemIndex] && (\r\n                                <div>{solutionForm[selectedProblemIndex].description}</div>\r\n                              )}\r\n                              <input\r\n                                type=\"text\"\r\n                                onChange={(e) =>\r\n                                  setSolutionForm(\r\n                                    produce(solutionForm, (draft) => {\r\n                                      draft[selectedProblemIndex].description =\r\n                                        e.target.value;\r\n                                    })\r\n                                  )\r\n                                }\r\n                              />\r\n                            </div>\r\n                            <Typography\r\n                              variant=\"h4\"\r\n                              display=\"inline\"\r\n                              className={classes.inputword}\r\n                            >\r\n                              텍스트\r\n                            </Typography>\r\n                            <IconButton\r\n                              className={classes.plusbutton}\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              component=\"span\"\r\n                            >\r\n                              <AddCircleIcon fontSize=\"large\" />\r\n                            </IconButton>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Container>\r\n                    </div>\r\n                  ) : null\r\n                )\r\n              )}\r\n            </Box>\r\n            <React.Fragment>\r\n              <Box\r\n                border={1}\r\n                style={{\r\n                  maxHeight: \"120\",\r\n                  margin: \"1em 1em 1em\",\r\n                  padding: \"1em 2em\",\r\n                }}\r\n              >\r\n                <Typography variant=\"h4\" align=\"center\">\r\n                  <Button\r\n                    disabled={\r\n                      !orders[selectedOrderIndex].problems.items[\r\n                        selectedProblemIndex - 1\r\n                      ]\r\n                    }\r\n                    variant=\"outlined\"\r\n                    color=\"black\"\r\n                    onClick={getLastProblem}\r\n                  >\r\n                    이전문제\r\n                  </Button>\r\n                  남은시간 02:13 ____ {selectedProblemIndex + 1}/\r\n                  {orders[selectedOrderIndex].problems.items.length}\r\n                  <Button\r\n                    disabled={\r\n                      !orders[selectedOrderIndex].problems.items[\r\n                        selectedProblemIndex + 1\r\n                      ]\r\n                    }\r\n                    variant=\"outlined\"\r\n                    color=\"black\"\r\n                    onClick={getNextProblem}\r\n                  >\r\n                    다음문제\r\n                  </Button>\r\n                  <Grid direction=\"column\" alignItems=\"center\">\r\n                    <Button variant=\"outlined\" onClick={handleViewSol}>\r\n                      {viewSol === true ? (\r\n                        <span>문제보기</span>\r\n                      ) : (\r\n                        <span>풀이보기</span>\r\n                      )}\r\n                    </Button>\r\n                    <Button variant=\"outlined\" onClick={createAnswer}>\r\n                      풀이 보내기\r\n                    </Button>\r\n                  </Grid>\r\n                </Typography>\r\n              </Box>\r\n            </React.Fragment>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <React.Fragment>\r\n              <Box\r\n                border={1}\r\n                style={{\r\n                  maxHeight: \"120\",\r\n                  margin: \"1em 1em 1em\",\r\n                  padding: \"0em 2em\",\r\n                }}\r\n              >\r\n                <Chatting solver={user.username} client={orders[selectedOrderIndex].username} channelID={orders[selectedOrderIndex].id}/>\r\n                {user.username}, {orders[selectedOrderIndex].username}, {orders[selectedOrderIndex].id}\r\n              </Box>\r\n            </React.Fragment>\r\n            <React.Fragment>\r\n              <Box\r\n                border={1}\r\n                style={{\r\n                  maxHeight: \"120\",\r\n                  margin: \"1em 1em 1em\",\r\n                  padding: \"1em 2em\",\r\n                }}\r\n              >\r\n                <br />\r\n                <Typography variant=\"h6\" align=\"center\">\r\n                  풀이중 <ArrowForwardIosOutlinedIcon /> 풀이완료/멘토링{\" \"}\r\n                  <ArrowForwardIosOutlinedIcon /> 종료\r\n                </Typography>\r\n                <br />\r\n                <br />\r\n              </Box>\r\n            </React.Fragment>\r\n          </Grid>\r\n        </Grid>\r\n        <AppFooter />\r\n      </React.Fragment>\r\n    </div>\r\n  ) : (\r\n    <SignIn />\r\n  )\r\n};\r\n\r\nexport default withRoot(withAuthenticator(Solve));\r\n","C:\\Users\\jjss5\\Univa-Solver\\src\\Pages\\SignUp.js",["186"],"C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignUp.js",["187"],"import withRoot from '../withRoot';\r\n// --- Post bootstrap -----\r\nimport React from 'react';\r\nimport {AmplifyAuthenticator} from '@aws-amplify/ui-react';\r\nimport {onAuthUIStateChange} from '@aws-amplify/ui-components';\r\nimport AppAppBar from '../views/AppAppBar';\r\nimport AppFooter from '../views/AppFooter';\r\nimport {UnivaSignIn, UnivaSignUp} from '../views/SignInSignUp'\r\n\r\n\r\nfunction SignUp({history}) {\r\n  const [authState, setAuthState] = React.useState();\r\n  const [user, setUser] = React.useState();\r\n\r\n  React.useEffect(() => {\r\n    onAuthUIStateChange((nextAuthState, authData) => {\r\n      setAuthState(nextAuthState);\r\n      setUser(authData);\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <AppAppBar isLogin={authState} />\r\n      <AmplifyAuthenticator initialAuthState = \"signup\">\r\n        <UnivaSignIn/>\r\n        <UnivaSignUp/>\r\n        { authState === \"confirmSignUp\"\r\n          ? history.goBack()\r\n          : null\r\n        }\r\n    </AmplifyAuthenticator>\r\n      <AppFooter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRoot(SignUp);","C:\\Users\\jjss5\\Univa-Solver\\src\\pages\\SignOut.js",["188","189","190","191","192","193","194","195","196","197","198","199","200","201","202"],"import withRoot from '../withRoot';\r\n// --- Post bootstrap -----\r\nimport React from 'react';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Field, Form, FormSpy } from 'react-final-form';\r\nimport Typography from '../components/Typography';\r\nimport AppFooter from '../views/AppFooter';\r\nimport AppAppBar from '../views/AppAppBar';\r\nimport AppForm from '../views/AppForm';\r\nimport RFTextField from '../form/RFTextField';\r\nimport FormButton from '../form/FormButton';\r\nimport FormFeedback from '../form/FormFeedback';\r\nimport { Auth } from 'aws-amplify';\r\nimport { withAuthenticator, AmplifyAuthenticator, AmplifySignOut, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';\r\nimport { AuthState, onAuthUIStateChange } from '@aws-amplify/ui-components';\r\n\r\nfunction signOut1() {\r\n\r\n  Auth.signOut()\r\n    .then(data => console.log(data))\r\n    .catch(err => console.log(err))\r\n\r\n}\r\n\r\nfunction SignOut() {\r\n  const [authState, setAuthState] = React.useState();\r\n  const [user, setUser] = React.useState();\r\n  const history = useHistory();\r\n\r\n  React.useEffect(() => {\r\n    onAuthUIStateChange((nextAuthState, authData) => {\r\n      setAuthState(nextAuthState);\r\n      setUser(authData);\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <AppAppBar isLogin={authState} />\r\n      <AmplifyAuthenticator>\r\n        {history.goBack() & signOut1()}\r\n        {authState === \"signedout\"\r\n          ? (history.push('/'))\r\n          : null\r\n        }\r\n        {/* {history.goBack()} */}\r\n      </AmplifyAuthenticator>\r\n      <AppFooter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRoot(SignOut);","C:\\Users\\jjss5\\Univa-Solver\\src\\views\\AppForm.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Paper.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\form\\FormFeedback.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\form\\RFTextField.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\form\\FormButton.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\form\\defer.js",[],"C:\\Users\\jjss5\\Univa-Solver\\src\\components\\Button.js",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":9,"column":20,"nodeType":"209","messageId":"210","endLine":9,"endColumn":24},{"ruleId":"207","severity":1,"message":"211","line":14,"column":10,"nodeType":"209","messageId":"210","endLine":14,"endColumn":14},{"ruleId":"207","severity":1,"message":"212","line":15,"column":7,"nodeType":"209","messageId":"210","endLine":15,"endColumn":14},{"ruleId":"207","severity":1,"message":"213","line":3,"column":15,"nodeType":"209","messageId":"210","endLine":3,"endColumn":22},{"ruleId":"207","severity":1,"message":"214","line":3,"column":39,"nodeType":"209","messageId":"210","endLine":3,"endColumn":55},{"ruleId":"207","severity":1,"message":"215","line":7,"column":10,"nodeType":"209","messageId":"210","endLine":7,"endColumn":36},{"ruleId":"207","severity":1,"message":"216","line":8,"column":10,"nodeType":"209","messageId":"210","endLine":8,"endColumn":29},{"ruleId":"207","severity":1,"message":"217","line":15,"column":7,"nodeType":"209","messageId":"210","endLine":15,"endColumn":13},{"ruleId":"207","severity":1,"message":"218","line":29,"column":10,"nodeType":"209","messageId":"210","endLine":29,"endColumn":18},{"ruleId":"207","severity":1,"message":"219","line":29,"column":20,"nodeType":"209","messageId":"210","endLine":29,"endColumn":31},{"ruleId":"220","severity":1,"message":"221","line":77,"column":6,"nodeType":"222","endLine":77,"endColumn":8,"suggestions":"223"},{"ruleId":"220","severity":1,"message":"221","line":139,"column":6,"nodeType":"222","endLine":139,"endColumn":16,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":176,"column":35,"nodeType":"227","messageId":"228","endLine":176,"endColumn":37},{"ruleId":"207","severity":1,"message":"229","line":5,"column":8,"nodeType":"209","messageId":"210","endLine":5,"endColumn":17},{"ruleId":"207","severity":1,"message":"230","line":7,"column":8,"nodeType":"209","messageId":"210","endLine":7,"endColumn":18},{"ruleId":"231","severity":1,"message":"232","line":85,"column":13,"nodeType":"233","endLine":85,"endColumn":42},{"ruleId":"207","severity":1,"message":"234","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":24},{"ruleId":"207","severity":1,"message":"235","line":2,"column":27,"nodeType":"209","messageId":"210","endLine":2,"endColumn":36},{"ruleId":"207","severity":1,"message":"214","line":3,"column":39,"nodeType":"209","messageId":"210","endLine":3,"endColumn":55},{"ruleId":"207","severity":1,"message":"236","line":5,"column":3,"nodeType":"209","messageId":"210","endLine":5,"endColumn":23},{"ruleId":"207","severity":1,"message":"234","line":6,"column":3,"nodeType":"209","messageId":"210","endLine":6,"endColumn":17},{"ruleId":"207","severity":1,"message":"237","line":7,"column":3,"nodeType":"209","messageId":"210","endLine":7,"endColumn":16},{"ruleId":"207","severity":1,"message":"238","line":8,"column":3,"nodeType":"209","messageId":"210","endLine":8,"endColumn":16},{"ruleId":"207","severity":1,"message":"239","line":13,"column":10,"nodeType":"209","messageId":"210","endLine":13,"endColumn":22},{"ruleId":"207","severity":1,"message":"240","line":13,"column":24,"nodeType":"209","messageId":"210","endLine":13,"endColumn":36},{"ruleId":"207","severity":1,"message":"241","line":13,"column":38,"nodeType":"209","messageId":"210","endLine":13,"endColumn":48},{"ruleId":"207","severity":1,"message":"242","line":20,"column":3,"nodeType":"209","messageId":"210","endLine":20,"endColumn":7},{"ruleId":"207","severity":1,"message":"243","line":22,"column":3,"nodeType":"209","messageId":"210","endLine":22,"endColumn":15},{"ruleId":"207","severity":1,"message":"244","line":25,"column":3,"nodeType":"209","messageId":"210","endLine":25,"endColumn":8},{"ruleId":"207","severity":1,"message":"245","line":27,"column":3,"nodeType":"209","messageId":"210","endLine":27,"endColumn":12},{"ruleId":"207","severity":1,"message":"246","line":28,"column":3,"nodeType":"209","messageId":"210","endLine":28,"endColumn":9},{"ruleId":"207","severity":1,"message":"247","line":29,"column":3,"nodeType":"209","messageId":"210","endLine":29,"endColumn":16},{"ruleId":"207","severity":1,"message":"248","line":30,"column":3,"nodeType":"209","messageId":"210","endLine":30,"endColumn":16},{"ruleId":"207","severity":1,"message":"249","line":31,"column":3,"nodeType":"209","messageId":"210","endLine":31,"endColumn":20},{"ruleId":"207","severity":1,"message":"250","line":32,"column":3,"nodeType":"209","messageId":"210","endLine":32,"endColumn":14},{"ruleId":"207","severity":1,"message":"251","line":39,"column":8,"nodeType":"209","messageId":"210","endLine":39,"endColumn":16},{"ruleId":"207","severity":1,"message":"252","line":43,"column":8,"nodeType":"209","messageId":"210","endLine":43,"endColumn":11},{"ruleId":"207","severity":1,"message":"253","line":44,"column":8,"nodeType":"209","messageId":"210","endLine":44,"endColumn":32},{"ruleId":"207","severity":1,"message":"254","line":52,"column":8,"nodeType":"209","messageId":"210","endLine":52,"endColumn":14},{"ruleId":"207","severity":1,"message":"255","line":58,"column":10,"nodeType":"209","messageId":"210","endLine":58,"endColumn":28},{"ruleId":"207","severity":1,"message":"217","line":60,"column":7,"nodeType":"209","messageId":"210","endLine":60,"endColumn":13},{"ruleId":"256","severity":1,"message":"257","line":109,"column":3,"nodeType":"258","messageId":"259","endLine":109,"endColumn":11},{"ruleId":"207","severity":1,"message":"260","line":160,"column":27,"nodeType":"209","messageId":"210","endLine":160,"endColumn":45},{"ruleId":"220","severity":1,"message":"261","line":202,"column":6,"nodeType":"222","endLine":202,"endColumn":34,"suggestions":"262"},{"ruleId":"220","severity":1,"message":"263","line":210,"column":6,"nodeType":"222","endLine":210,"endColumn":48,"suggestions":"264"},{"ruleId":"265","severity":1,"message":"266","line":316,"column":29,"nodeType":"267","messageId":"268","endLine":316,"endColumn":30},{"ruleId":"207","severity":1,"message":"211","line":13,"column":10,"nodeType":"209","messageId":"210","endLine":13,"endColumn":14},{"ruleId":"207","severity":1,"message":"211","line":13,"column":10,"nodeType":"209","messageId":"210","endLine":13,"endColumn":14},{"ruleId":"207","severity":1,"message":"208","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":14},{"ruleId":"207","severity":1,"message":"269","line":5,"column":10,"nodeType":"209","messageId":"210","endLine":5,"endColumn":15},{"ruleId":"207","severity":1,"message":"270","line":5,"column":17,"nodeType":"209","messageId":"210","endLine":5,"endColumn":21},{"ruleId":"207","severity":1,"message":"271","line":5,"column":23,"nodeType":"209","messageId":"210","endLine":5,"endColumn":30},{"ruleId":"207","severity":1,"message":"272","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":18},{"ruleId":"207","severity":1,"message":"273","line":9,"column":8,"nodeType":"209","messageId":"210","endLine":9,"endColumn":15},{"ruleId":"207","severity":1,"message":"274","line":10,"column":8,"nodeType":"209","messageId":"210","endLine":10,"endColumn":19},{"ruleId":"207","severity":1,"message":"275","line":11,"column":8,"nodeType":"209","messageId":"210","endLine":11,"endColumn":18},{"ruleId":"207","severity":1,"message":"276","line":12,"column":8,"nodeType":"209","messageId":"210","endLine":12,"endColumn":20},{"ruleId":"207","severity":1,"message":"277","line":14,"column":10,"nodeType":"209","messageId":"210","endLine":14,"endColumn":27},{"ruleId":"207","severity":1,"message":"234","line":14,"column":51,"nodeType":"209","messageId":"210","endLine":14,"endColumn":65},{"ruleId":"207","severity":1,"message":"237","line":14,"column":67,"nodeType":"209","messageId":"210","endLine":14,"endColumn":80},{"ruleId":"207","severity":1,"message":"238","line":14,"column":82,"nodeType":"209","messageId":"210","endLine":14,"endColumn":95},{"ruleId":"207","severity":1,"message":"278","line":15,"column":10,"nodeType":"209","messageId":"210","endLine":15,"endColumn":19},{"ruleId":"207","severity":1,"message":"211","line":27,"column":10,"nodeType":"209","messageId":"210","endLine":27,"endColumn":14},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'history' is assigned a value but never used.","'Storage' is defined but never used.","'graphqlOperation' is defined but never used.","'onCreateMessageByChannelId' is defined but never used.","'messagesByChannelId' is defined but never used.","'client' is assigned a value but never used.","'username' is assigned a value but never used.","'setUsername' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.channelID'. Either include it or remove the dependency array.","ArrayExpression",["281"],["282"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'TextField' is defined but never used.","'AppBarList' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'AmplifySignOut' is defined but never used.","'useEffect' is defined but never used.","'AmplifyAuthenticator' is defined but never used.","'AmplifySignIn' is defined but never used.","'AmplifySignUp' is defined but never used.","'listProblems' is defined but never used.","'searchOrders' is defined but never used.","'listOrders' is defined but never used.","'List' is defined but never used.","'ListItemText' is defined but never used.","'Paper' is defined but never used.","'InputBase' is defined but never used.","'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'HelpIcon' is defined but never used.","'ex2' is defined but never used.","'ArrowBackIosOutlinedIcon' is defined but never used.","'moment' is defined but never used.","'solverBySolverName' is defined but never used.","no-dupe-keys","Duplicate key 'inputbox'.","ObjectExpression","unexpected","'setAnsweredOrderId' is assigned a value but never used.","React Hook React.useLayoutEffect has a missing dependency: 'fetchFirst'. Either include it or remove the dependency array.",["283"],"React Hook React.useLayoutEffect has missing dependencies: 'getProblem' and 'orders'. Either include them or remove the dependency array.",["284"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'Field' is defined but never used.","'Form' is defined but never used.","'FormSpy' is defined but never used.","'Typography' is defined but never used.","'AppForm' is defined but never used.","'RFTextField' is defined but never used.","'FormButton' is defined but never used.","'FormFeedback' is defined but never used.","'withAuthenticator' is defined but never used.","'AuthState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},"Update the dependencies array to be: [props.channelID]",{"range":"293","text":"294"},"Update the dependencies array to be: [messages, props.channelID]",{"range":"295","text":"296"},"Update the dependencies array to be: [authState, answeredOrderId, fetchFirst]",{"range":"297","text":"298"},"Update the dependencies array to be: [getProblem, orders, selectedOrderIndex, selectedProblemIndex]",{"range":"299","text":"300"},[2307,2309],"[props.channelID]",[3957,3967],"[messages, props.channelID]",[5396,5424],"[authState, answeredOrderId, fetchFirst]",[5616,5658],"[getProblem, orders, selectedOrderIndex, selectedProblemIndex]"]